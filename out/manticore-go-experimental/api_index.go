=begin comment

Manticore Search Client

Please note that this client is experimental. For full documentation of the API methods consult https://manual.manticoresearch.com/. 

The version of the OpenAPI document: 1.0.0
Contact: info@manticoresearch.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package ::IndexApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use ::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq '::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = ::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# Bulk
#
# Bulk index operations
# 
# @param string $body  (required)
{
    my $params = {
    'body' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'Bulk' } = { 
        summary => 'Bulk index operations',
        params => $params,
        returns => 'BulkResponse',
        };
}
# @return BulkResponse
#
sub Bulk {
    my ($self, %args) = @_;

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling Bulk");
    }

    # parse inputs
    my $_resource_path = '/json/bulk';

    my $_method = 'Post';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-ndjson');

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('BulkResponse', $response);
    return $_response_object;
}

#
# Delete
#
# Delete a document in an index
# 
# @param DeleteDocumentRequest $deleteDocumentRequest  (required)
{
    my $params = {
    'deleteDocumentRequest' => {
        data_type => 'DeleteDocumentRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'Delete' } = { 
        summary => 'Delete a document in an index',
        params => $params,
        returns => 'DeleteResponse',
        };
}
# @return DeleteResponse
#
sub Delete {
    my ($self, %args) = @_;

    # verify the required parameter 'deleteDocumentRequest' is set
    unless (exists $args{'deleteDocumentRequest'}) {
      croak("Missing the required parameter 'deleteDocumentRequest' when calling Delete");
    }

    # parse inputs
    my $_resource_path = '/json/delete';

    my $_method = 'Post';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'deleteDocumentRequest'}) {
        $_body_data = $args{'deleteDocumentRequest'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('DeleteResponse', $response);
    return $_response_object;
}

#
# Insert
#
# Create a new document in an index
# 
# @param InsertDocumentRequest $insertDocumentRequest  (required)
{
    my $params = {
    'insertDocumentRequest' => {
        data_type => 'InsertDocumentRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'Insert' } = { 
        summary => 'Create a new document in an index',
        params => $params,
        returns => 'SuccessResponse',
        };
}
# @return SuccessResponse
#
sub Insert {
    my ($self, %args) = @_;

    # verify the required parameter 'insertDocumentRequest' is set
    unless (exists $args{'insertDocumentRequest'}) {
      croak("Missing the required parameter 'insertDocumentRequest' when calling Insert");
    }

    # parse inputs
    my $_resource_path = '/json/insert';

    my $_method = 'Post';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'insertDocumentRequest'}) {
        $_body_data = $args{'insertDocumentRequest'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SuccessResponse', $response);
    return $_response_object;
}

#
# Replace
#
# Replace new document in an index
# 
# @param InsertDocumentRequest $insertDocumentRequest  (required)
{
    my $params = {
    'insertDocumentRequest' => {
        data_type => 'InsertDocumentRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'Replace' } = { 
        summary => 'Replace new document in an index',
        params => $params,
        returns => 'SuccessResponse',
        };
}
# @return SuccessResponse
#
sub Replace {
    my ($self, %args) = @_;

    # verify the required parameter 'insertDocumentRequest' is set
    unless (exists $args{'insertDocumentRequest'}) {
      croak("Missing the required parameter 'insertDocumentRequest' when calling Replace");
    }

    # parse inputs
    my $_resource_path = '/json/replace';

    my $_method = 'Post';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'insertDocumentRequest'}) {
        $_body_data = $args{'insertDocumentRequest'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SuccessResponse', $response);
    return $_response_object;
}

#
# Update
#
# Update a document in an index
# 
# @param UpdateDocumentRequest $updateDocumentRequest  (required)
{
    my $params = {
    'updateDocumentRequest' => {
        data_type => 'UpdateDocumentRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'Update' } = { 
        summary => 'Update a document in an index',
        params => $params,
        returns => 'UpdateResponse',
        };
}
# @return UpdateResponse
#
sub Update {
    my ($self, %args) = @_;

    # verify the required parameter 'updateDocumentRequest' is set
    unless (exists $args{'updateDocumentRequest'}) {
      croak("Missing the required parameter 'updateDocumentRequest' when calling Update");
    }

    # parse inputs
    my $_resource_path = '/json/update';

    my $_method = 'Post';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'updateDocumentRequest'}) {
        $_body_data = $args{'updateDocumentRequest'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('UpdateResponse', $response);
    return $_response_object;
}

1;
