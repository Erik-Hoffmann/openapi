//
// IndexAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class IndexAPI {
    /**
     Bulk index operations
     
     - parameter body: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func bulk(body: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BulkResponse?,_ error: Error?) -> Void)) {
        bulkWithRequestBuilder(body: body).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Bulk index operations
     - POST /json/bulk
     - Sends multiple operatons like inserts, updates, replaces or deletes.  For each operation it's object must have same format as in their dedicated method.  The method expects a raw string as the batch in NDJSON.  Each operation object needs to be serialized to   JSON and separated by endline (\\n).      An example of raw input:      ```   {\"insert\": {\"index\": \"movies\", \"doc\": {\"plot\": \"A secret team goes to North Pole\", \"rating\": 9.5, \"language\": [2, 3], \"title\": \"This is an older movie\", \"lon\": 51.99, \"meta\": {\"keywords\":[\"travel\",\"ice\"],\"genre\":[\"adventure\"]}, \"year\": 1950, \"lat\": 60.4, \"advise\": \"PG-13\"}}}   \\n   {\"delete\": {\"index\": \"movies\",\"id\":700}}   ```      Responds with an object telling whenever any errors occured and an array with status for each operation:      ```   {'items':[{'update':{'_index':'products','_id':1,'result':'updated'}},{'update':{'_index':'products','_id':2,'result':'updated'}}],'errors':false}   ```   
     - externalDocs: class ExternalDocumentation {
    description: null
    url: https://docs.manticoresearch.com/latest/html/http_reference/json_update.html
}
     - parameter body: (body)  
     - returns: RequestBuilder<BulkResponse> 
     */
    open class func bulkWithRequestBuilder(body: String) -> RequestBuilder<BulkResponse> {
        let path = "/json/bulk"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BulkResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete a document in an index
     
     - parameter deleteDocumentRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func delete(deleteDocumentRequest: DeleteDocumentRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: DeleteResponse?,_ error: Error?) -> Void)) {
        deleteWithRequestBuilder(deleteDocumentRequest: deleteDocumentRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a document in an index
     - POST /json/delete
     - Delete one or several documents. The method has 2 ways of deleting: either by id, in case only one document is deleted or by using a  match query, in which case multiple documents can be delete . Example of input to delete by id:    ```   {'index':'movies','id':100}   ```  Example of input to delete using a query:    ```   {'index':'movies','query':{'bool':{'must':[{'query_string':'new movie'}]}}}   ```  The match query has same syntax as in for searching. Responds with an object telling how many documents got deleted:     ```   {'_index':'products','updated':1}   ``` 
     - externalDocs: class ExternalDocumentation {
    description: null
    url: https://docs.manticoresearch.com/latest/html/http_reference/json_update.html
}
     - parameter deleteDocumentRequest: (body)  
     - returns: RequestBuilder<DeleteResponse> 
     */
    open class func deleteWithRequestBuilder(deleteDocumentRequest: DeleteDocumentRequest) -> RequestBuilder<DeleteResponse> {
        let path = "/json/delete"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: deleteDocumentRequest)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DeleteResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a new document in an index
     
     - parameter insertDocumentRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func insert(insertDocumentRequest: InsertDocumentRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SuccessResponse?,_ error: Error?) -> Void)) {
        insertWithRequestBuilder(insertDocumentRequest: insertDocumentRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a new document in an index
     - POST /json/insert
     - Insert a document.  Expects an object like:     ```   {'index':'movies','id':701,'doc':{'title':'This is an old movie','plot':'A secret team goes to North Pole','year':1950,'rating':9.5,'lat':60.4,'lon':51.99,'advise':'PG-13','meta':'{\"keywords\":{\"travel\",\"ice\"},\"genre\":{\"adventure\"}}','language':[2,3]}}   ```   The document id can also be missing, in which case an autogenerated one will be used:             ```   {'index':'movies','doc':{'title':'This is a new movie','plot':'A secret team goes to North Pole','year':2020,'rating':9.5,'lat':60.4,'lon':51.99,'advise':'PG-13','meta':'{\"keywords\":{\"travel\",\"ice\"},\"genre\":{\"adventure\"}}','language':[2,3]}}   ```   It responds with an object in format:      ```   {'_index':'products','_id':701,'created':true,'result':'created','status':201}   ``` 
     - externalDocs: class ExternalDocumentation {
    description: null
    url: https://docs.manticoresearch.com/latest/html/http_reference/json_insert.html
}
     - parameter insertDocumentRequest: (body)  
     - returns: RequestBuilder<SuccessResponse> 
     */
    open class func insertWithRequestBuilder(insertDocumentRequest: InsertDocumentRequest) -> RequestBuilder<SuccessResponse> {
        let path = "/json/insert"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: insertDocumentRequest)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SuccessResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Replace new document in an index
     
     - parameter insertDocumentRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func replace(insertDocumentRequest: InsertDocumentRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SuccessResponse?,_ error: Error?) -> Void)) {
        replaceWithRequestBuilder(insertDocumentRequest: insertDocumentRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Replace new document in an index
     - POST /json/replace
     - Replace an existing document. Input has same format as `insert` operation. <br/> Responds with an object in format: <br/>    ```   {'_index':'products','_id':1,'created':false,'result':'updated','status':200}   ``` 
     - externalDocs: class ExternalDocumentation {
    description: null
    url: https://docs.manticoresearch.com/latest/html/http_reference/json_insert.html
}
     - parameter insertDocumentRequest: (body)  
     - returns: RequestBuilder<SuccessResponse> 
     */
    open class func replaceWithRequestBuilder(insertDocumentRequest: InsertDocumentRequest) -> RequestBuilder<SuccessResponse> {
        let path = "/json/replace"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: insertDocumentRequest)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SuccessResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update a document in an index
     
     - parameter updateDocumentRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func update(updateDocumentRequest: UpdateDocumentRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: UpdateResponse?,_ error: Error?) -> Void)) {
        updateWithRequestBuilder(updateDocumentRequest: updateDocumentRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update a document in an index
     - POST /json/update
     - Update one or several documents. The update can be made by passing the id or by using a match query in case multiple documents can be updated.  For example update a document using document id:    ```   {'index':'movies','doc':{'rating':9.49},'id':100}   ```  And update by using a match query:    ```   {'index':'movies','doc':{'rating':9.49},'query':{'bool':{'must':[{'query_string':'new movie'}]}}}   ```   The match query has same syntax as for searching. Responds with an object that tells how many documents where updated in format:     ```   {'_index':'products','updated':1}   ``` 
     - externalDocs: class ExternalDocumentation {
    description: null
    url: https://docs.manticoresearch.com/latest/html/http_reference/json_update.html
}
     - parameter updateDocumentRequest: (body)  
     - returns: RequestBuilder<UpdateResponse> 
     */
    open class func updateWithRequestBuilder(updateDocumentRequest: UpdateDocumentRequest) -> RequestBuilder<UpdateResponse> {
        let path = "/json/update"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateDocumentRequest)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UpdateResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
