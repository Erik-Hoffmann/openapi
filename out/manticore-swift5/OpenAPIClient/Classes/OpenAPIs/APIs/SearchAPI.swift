//
// SearchAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class SearchAPI {
    /**
     Perform reverse search on a percolate index
     
     - parameter index: (path) Name of the percolate index 
     - parameter percolateRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func percolate(index: String, percolateRequest: PercolateRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SearchResponse?,_ error: Error?) -> Void)) {
        percolateWithRequestBuilder(index: index, percolateRequest: percolateRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Perform reverse search on a percolate index
     - POST /json/pq/{index}/search
     - Performs a percolate search.  This method must be used only on percolate indexes.  Expects two paramenters: the index name and an object with array of documents to be tested. An example of the documents object:    ```   {\"query\":{\"percolate\":{\"document\":{\"content\":\"sample content\"}}}}   ```  Responds with an object with matched stored queries:     ```   {'timed_out':false,'hits':{'total':2,'max_score':1,'hits':[{'_index':'idx_pq_1','_type':'doc','_id':'2','_score':'1','_source':{'query':{'match':{'title':'some'},}}},{'_index':'idx_pq_1','_type':'doc','_id':'5','_score':'1','_source':{'query':{'ql':'some | none'}}}]}}   ``` 
     - externalDocs: class ExternalDocumentation {
    description: null
    url: https://docs.manticoresearch.com/latest/html/http_reference/json_update.html
}
     - parameter index: (path) Name of the percolate index 
     - parameter percolateRequest: (body)  
     - returns: RequestBuilder<SearchResponse> 
     */
    open class func percolateWithRequestBuilder(index: String, percolateRequest: PercolateRequest) -> RequestBuilder<SearchResponse> {
        var path = "/json/pq/{index}/search"
        let indexPreEscape = "\(APIHelper.mapValueToPathItem(index))"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{index}", with: indexPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: percolateRequest)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SearchResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Performs a search
     
     - parameter searchRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func search(searchRequest: SearchRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SearchResponse?,_ error: Error?) -> Void)) {
        searchWithRequestBuilder(searchRequest: searchRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Performs a search
     - POST /json/search
     - Performs a search.  Expects an object with mandatory properties: * the index name * the match query object Example :    ```   {'index':'movies','query':{'bool':{'must':[{'query_string':' movie'}]}},'script_fields':{'myexpr':{'script':{'inline':'IF(rating>8,1,0)'}}},'sort':[{'myexpr':'desc'},{'_score':'desc'}],'profile':true}   ```  It responds with an object with: - time of execution - if the query timed out - an array with hits (matched documents) - additional, if profiling is enabled, an array with profiling information is attached     ```   {'took':10,'timed_out':false,'hits':{'total':2,'hits':[{'_id':'1','_score':1,'_source':{'gid':11}},{'_id':'2','_score':1,'_source':{'gid':12}}]}}   ```  For more information about the match query syntax, additional paramaters that can be set to the input and response, please check: https://docs.manticoresearch.com/latest/html/http_reference/json_search.html. 
     - externalDocs: class ExternalDocumentation {
    description: null
    url: https://docs.manticoresearch.com/latest/html/http_reference/json_search.html
}
     - parameter searchRequest: (body)  
     - returns: RequestBuilder<SearchResponse> 
     */
    open class func searchWithRequestBuilder(searchRequest: SearchRequest) -> RequestBuilder<SearchResponse> {
        let path = "/json/search"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: searchRequest)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SearchResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
