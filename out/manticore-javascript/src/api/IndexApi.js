/**
 * Manticore Search API
 * This is the API for Manticore Search HTTP protocol. For full documentation of the API methods consult https://manual.manticoresearch.com/. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@manticoresearch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BulkResponse from '../model/BulkResponse';
import DeleteDocumentRequest from '../model/DeleteDocumentRequest';
import DeleteResponse from '../model/DeleteResponse';
import ErrorResponse from '../model/ErrorResponse';
import InsertDocumentRequest from '../model/InsertDocumentRequest';
import SuccessResponse from '../model/SuccessResponse';
import UpdateDocumentRequest from '../model/UpdateDocumentRequest';
import UpdateResponse from '../model/UpdateResponse';

/**
* Index service.
* @module api/IndexApi
* @version 1.0.0
*/
export default class IndexApi {

    /**
    * Constructs a new IndexApi. 
    * @alias module:api/IndexApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the bulk operation.
     * @callback module:api/IndexApi~bulkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk index operations
     * Sends multiple operatons like inserts, updates, replaces or deletes. <br/> For each operation it's object must have same format as in their dedicated method. <br/> The method expects a raw string as the batch in NDJSON.  Each operation object needs to be serialized to   JSON and separated by endline (\\n). <br/>     An example of raw input:      `{\"insert\": {\"index\": \"movies\", \"doc\": {\"plot\": \"A secret team goes to North Pole\", \"rating\": 9.5, \"language\": [2, 3], \"title\": \"This is an older movie\", \"lon\": 51.99, \"meta\": {\"keywords\":[\"travel\",\"ice\"],\"genre\":[\"adventure\"]}, \"year\": 1950, \"lat\": 60.4, \"advise\": \"PG-13\"}}}\\n{\"delete\": {\"index\": \"movies\",\"id\":700}}`      Responds with an object telling whenever any errors occured and an array with status for each operation:<br/>   ```   {'items':[{'update':{'_index':'products','_id':1,'result':'updated'}},{'update':{'_index':'products','_id':2,'result':'updated'}}],'errors':false}   ```   
     * @param {String} body 
     * @param {module:api/IndexApi~bulkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BulkResponse}
     */
    bulk(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling bulk");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/x-ndjson'];
      let accepts = ['application/json'];
      let returnType = BulkResponse;
      return this.apiClient.callApi(
        '/json/bulk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the callDelete operation.
     * @callback module:api/IndexApi~callDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a document in an index
     * Delete one or several documents. <br/> The method has 2 ways of deleting: either by id, in case only one document is deleted or by using a  match query, in which case multiple documents can be delete . <br/> Example of input to delete by id: <br/> ``` {'index':'movies','id':100} ``` <br/> Example of input to delete using a query: ``` {'index':'movies','query':{'bool':{'must':[{'query_string':'new movie'}]}}} ``` <br/> The match query has same syntax as in for searching. <br/> Responds with an object telling how many documents got deleted: <br/> ``` {'_index':'products','updated':1} ``` 
     * @param {module:model/DeleteDocumentRequest} deleteDocumentRequest 
     * @param {module:api/IndexApi~callDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteResponse}
     */
    callDelete(deleteDocumentRequest, callback) {
      let postBody = deleteDocumentRequest;
      // verify the required parameter 'deleteDocumentRequest' is set
      if (deleteDocumentRequest === undefined || deleteDocumentRequest === null) {
        throw new Error("Missing the required parameter 'deleteDocumentRequest' when calling callDelete");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteResponse;
      return this.apiClient.callApi(
        '/json/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the insert operation.
     * @callback module:api/IndexApi~insertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new document in an index
     * Insert a document. <br/> Expects an object like: <br/> ```{'index':'movies','id':701,'doc':{'title':'This is an old movie','plot':'A secret team goes to North Pole','year':1950,'rating':9.5,'lat':60.4,'lon':51.99,'advise':'PG-13','meta':'{\"keywords\":{\"travel\",\"ice\"},\"genre\":{\"adventure\"}}','language':[2,3]}}```. <br/> The document id can also be missing, in which case an autogenerated one will be used: <br/> ```{'index':'movies','doc':{'title':'This is a new movie','plot':'A secret team goes to North Pole','year':2020,'rating':9.5,'lat':60.4,'lon':51.99,'advise':'PG-13','meta':'{\"keywords\":{\"travel\",\"ice\"},\"genre\":{\"adventure\"}}','language':[2,3]}}``` <br/> It responds with an object in format: <br/> ```{'_index':'products','_id':701,'created':true,'result':'created','status':201}``` 
     * @param {module:model/InsertDocumentRequest} insertDocumentRequest 
     * @param {module:api/IndexApi~insertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessResponse}
     */
    insert(insertDocumentRequest, callback) {
      let postBody = insertDocumentRequest;
      // verify the required parameter 'insertDocumentRequest' is set
      if (insertDocumentRequest === undefined || insertDocumentRequest === null) {
        throw new Error("Missing the required parameter 'insertDocumentRequest' when calling insert");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SuccessResponse;
      return this.apiClient.callApi(
        '/json/insert', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replace operation.
     * @callback module:api/IndexApi~replaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace new document in an index
     * Replace an existing document. Input has same format as `insert` operation. <br/> Responds with an object in format: <br/> ``` {'_index':'products','_id':1,'created':false,'result':'updated','status':200} ``` 
     * @param {module:model/InsertDocumentRequest} insertDocumentRequest 
     * @param {module:api/IndexApi~replaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessResponse}
     */
    replace(insertDocumentRequest, callback) {
      let postBody = insertDocumentRequest;
      // verify the required parameter 'insertDocumentRequest' is set
      if (insertDocumentRequest === undefined || insertDocumentRequest === null) {
        throw new Error("Missing the required parameter 'insertDocumentRequest' when calling replace");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SuccessResponse;
      return this.apiClient.callApi(
        '/json/replace', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the update operation.
     * @callback module:api/IndexApi~updateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a document in an index
     * Update one or several documents. <br/> The update can be made by passing the id or by using a match query in case multiple documents can be updated. <br/> For example update a document using document id: <br/> <code> {'index':'movies','doc':{'rating':9.49},'id':100} </code> <br/> And update by using a match query: <br/> ``` {'index':'movies','doc':{'rating':9.49},'query':{'bool':{'must':[{'query_string':'new movie'}]}}} ```  <br/> The match query has same syntax as for searching. Responds with an object that tells how many documents where updated in format: <br/> ``` {'_index':'products','updated':1} ``` 
     * @param {module:model/UpdateDocumentRequest} updateDocumentRequest 
     * @param {module:api/IndexApi~updateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateResponse}
     */
    update(updateDocumentRequest, callback) {
      let postBody = updateDocumentRequest;
      // verify the required parameter 'updateDocumentRequest' is set
      if (updateDocumentRequest === undefined || updateDocumentRequest === null) {
        throw new Error("Missing the required parameter 'updateDocumentRequest' when calling update");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateResponse;
      return this.apiClient.callApi(
        '/json/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
