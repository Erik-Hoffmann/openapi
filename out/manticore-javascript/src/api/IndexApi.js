/**
 * Manticore Search API
 * This is the API for Manticore Search HTTP protocol 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@manticoresearch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DeleteDocumentRequest from '../model/DeleteDocumentRequest';
import ErrorResponse from '../model/ErrorResponse';
import InsertDocumentRequest from '../model/InsertDocumentRequest';
import SuccessResponse from '../model/SuccessResponse';
import UpdateDocumentRequest from '../model/UpdateDocumentRequest';

/**
* Index service.
* @module api/IndexApi
* @version 1.0.0
*/
export default class IndexApi {

    /**
    * Constructs a new IndexApi. 
    * @alias module:api/IndexApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the bulk operation.
     * @callback module:api/IndexApi~bulkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk index operations
     * @param {Array.<Object>} requestBody 
     * @param {module:api/IndexApi~bulkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessResponse}
     */
    bulk(requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling bulk");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/x-ndjson'];
      let accepts = ['application/json'];
      let returnType = SuccessResponse;
      return this.apiClient.callApi(
        '/json/bulk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the callDelete operation.
     * @callback module:api/IndexApi~callDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a document in an index
     * @param {module:model/DeleteDocumentRequest} deleteDocumentRequest 
     * @param {module:api/IndexApi~callDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessResponse}
     */
    callDelete(deleteDocumentRequest, callback) {
      let postBody = deleteDocumentRequest;
      // verify the required parameter 'deleteDocumentRequest' is set
      if (deleteDocumentRequest === undefined || deleteDocumentRequest === null) {
        throw new Error("Missing the required parameter 'deleteDocumentRequest' when calling callDelete");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SuccessResponse;
      return this.apiClient.callApi(
        '/json/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the insert operation.
     * @callback module:api/IndexApi~insertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new document in an index
     * @param {module:model/InsertDocumentRequest} insertDocumentRequest 
     * @param {module:api/IndexApi~insertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessResponse}
     */
    insert(insertDocumentRequest, callback) {
      let postBody = insertDocumentRequest;
      // verify the required parameter 'insertDocumentRequest' is set
      if (insertDocumentRequest === undefined || insertDocumentRequest === null) {
        throw new Error("Missing the required parameter 'insertDocumentRequest' when calling insert");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SuccessResponse;
      return this.apiClient.callApi(
        '/json/insert', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replace operation.
     * @callback module:api/IndexApi~replaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace new document in an index
     * @param {module:model/InsertDocumentRequest} insertDocumentRequest 
     * @param {module:api/IndexApi~replaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessResponse}
     */
    replace(insertDocumentRequest, callback) {
      let postBody = insertDocumentRequest;
      // verify the required parameter 'insertDocumentRequest' is set
      if (insertDocumentRequest === undefined || insertDocumentRequest === null) {
        throw new Error("Missing the required parameter 'insertDocumentRequest' when calling replace");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SuccessResponse;
      return this.apiClient.callApi(
        '/json/replace', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the update operation.
     * @callback module:api/IndexApi~updateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a document in an index
     * @param {module:model/UpdateDocumentRequest} updateDocumentRequest 
     * @param {module:api/IndexApi~updateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessResponse}
     */
    update(updateDocumentRequest, callback) {
      let postBody = updateDocumentRequest;
      // verify the required parameter 'updateDocumentRequest' is set
      if (updateDocumentRequest === undefined || updateDocumentRequest === null) {
        throw new Error("Missing the required parameter 'updateDocumentRequest' when calling update");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SuccessResponse;
      return this.apiClient.callApi(
        '/json/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
