/* 
 * Manticore Search Client
 *
 * Please note that this client is experimental. For full documentation of the API methods consult https://manual.manticoresearch.com/. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@manticoresearch.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Payload for update document
    /// </summary>
    [DataContract]
    public partial class UpdateDocumentRequest :  IEquatable<UpdateDocumentRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateDocumentRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateDocumentRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateDocumentRequest" /> class.
        /// </summary>
        /// <param name="index">index (required).</param>
        /// <param name="doc">Index name (required).</param>
        /// <param name="id">Document ID.</param>
        /// <param name="query">Query tree object.</param>
        public UpdateDocumentRequest(string index = default(string), Dictionary<string, Object> doc = default(Dictionary<string, Object>), long id = default(long), Dictionary<string, Object> query = default(Dictionary<string, Object>))
        {
            // to ensure "index" is required (not null)
            if (index == null)
            {
                throw new InvalidDataException("index is a required property for UpdateDocumentRequest and cannot be null");
            }
            else
            {
                this.Index = index;
            }
            
            // to ensure "doc" is required (not null)
            if (doc == null)
            {
                throw new InvalidDataException("doc is a required property for UpdateDocumentRequest and cannot be null");
            }
            else
            {
                this.Doc = doc;
            }
            
            this.Id = id;
            this.Query = query;
        }
        
        /// <summary>
        /// Gets or Sets Index
        /// </summary>
        [DataMember(Name="index", EmitDefaultValue=true)]
        public string Index { get; set; }

        /// <summary>
        /// Index name
        /// </summary>
        /// <value>Index name</value>
        [DataMember(Name="doc", EmitDefaultValue=true)]
        public Dictionary<string, Object> Doc { get; set; }

        /// <summary>
        /// Document ID
        /// </summary>
        /// <value>Document ID</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long Id { get; set; }

        /// <summary>
        /// Query tree object
        /// </summary>
        /// <value>Query tree object</value>
        [DataMember(Name="query", EmitDefaultValue=false)]
        public Dictionary<string, Object> Query { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateDocumentRequest {\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  Doc: ").Append(Doc).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateDocumentRequest);
        }

        /// <summary>
        /// Returns true if UpdateDocumentRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateDocumentRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateDocumentRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Index == input.Index ||
                    (this.Index != null &&
                    this.Index.Equals(input.Index))
                ) && 
                (
                    this.Doc == input.Doc ||
                    this.Doc != null &&
                    input.Doc != null &&
                    this.Doc.SequenceEqual(input.Doc)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Query == input.Query ||
                    this.Query != null &&
                    input.Query != null &&
                    this.Query.SequenceEqual(input.Query)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Index != null)
                    hashCode = hashCode * 59 + this.Index.GetHashCode();
                if (this.Doc != null)
                    hashCode = hashCode * 59 + this.Doc.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Query != null)
                    hashCode = hashCode * 59 + this.Query.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
