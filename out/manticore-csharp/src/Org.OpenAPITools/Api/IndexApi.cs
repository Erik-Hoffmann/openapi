/* 
 * Manticore Search API
 *
 * This is the API for Manticore Search HTTP protocol. For full documentation of the API methods consult https://manual.manticoresearch.com/. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@manticoresearch.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIndexApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Bulk index operations
        /// </summary>
        /// <remarks>
        /// Sends multiple operatons like inserts, updates, replaces or deletes. &lt;br/&gt; For each operation it&#39;s object must have same format as in their dedicated method. &lt;br/&gt; The method expects a raw string as the batch in NDJSON.  Each operation object needs to be serialized to   JSON and separated by endline (\\n). &lt;br/&gt;     An example of raw input:      &#x60;{\&quot;insert\&quot;: {\&quot;index\&quot;: \&quot;movies\&quot;, \&quot;doc\&quot;: {\&quot;plot\&quot;: \&quot;A secret team goes to North Pole\&quot;, \&quot;rating\&quot;: 9.5, \&quot;language\&quot;: [2, 3], \&quot;title\&quot;: \&quot;This is an older movie\&quot;, \&quot;lon\&quot;: 51.99, \&quot;meta\&quot;: {\&quot;keywords\&quot;:[\&quot;travel\&quot;,\&quot;ice\&quot;],\&quot;genre\&quot;:[\&quot;adventure\&quot;]}, \&quot;year\&quot;: 1950, \&quot;lat\&quot;: 60.4, \&quot;advise\&quot;: \&quot;PG-13\&quot;}}}\\n{\&quot;delete\&quot;: {\&quot;index\&quot;: \&quot;movies\&quot;,\&quot;id\&quot;:700}}&#x60;      Responds with an object telling whenever any errors occured and an array with status for each operation:&lt;br/&gt;   &#x60;&#x60;&#x60;   {&#39;items&#39;:[{&#39;update&#39;:{&#39;_index&#39;:&#39;products&#39;,&#39;_id&#39;:1,&#39;result&#39;:&#39;updated&#39;}},{&#39;update&#39;:{&#39;_index&#39;:&#39;products&#39;,&#39;_id&#39;:2,&#39;result&#39;:&#39;updated&#39;}}],&#39;errors&#39;:false}   &#x60;&#x60;&#x60;   
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>BulkResponse</returns>
        BulkResponse Bulk (string body);

        /// <summary>
        /// Bulk index operations
        /// </summary>
        /// <remarks>
        /// Sends multiple operatons like inserts, updates, replaces or deletes. &lt;br/&gt; For each operation it&#39;s object must have same format as in their dedicated method. &lt;br/&gt; The method expects a raw string as the batch in NDJSON.  Each operation object needs to be serialized to   JSON and separated by endline (\\n). &lt;br/&gt;     An example of raw input:      &#x60;{\&quot;insert\&quot;: {\&quot;index\&quot;: \&quot;movies\&quot;, \&quot;doc\&quot;: {\&quot;plot\&quot;: \&quot;A secret team goes to North Pole\&quot;, \&quot;rating\&quot;: 9.5, \&quot;language\&quot;: [2, 3], \&quot;title\&quot;: \&quot;This is an older movie\&quot;, \&quot;lon\&quot;: 51.99, \&quot;meta\&quot;: {\&quot;keywords\&quot;:[\&quot;travel\&quot;,\&quot;ice\&quot;],\&quot;genre\&quot;:[\&quot;adventure\&quot;]}, \&quot;year\&quot;: 1950, \&quot;lat\&quot;: 60.4, \&quot;advise\&quot;: \&quot;PG-13\&quot;}}}\\n{\&quot;delete\&quot;: {\&quot;index\&quot;: \&quot;movies\&quot;,\&quot;id\&quot;:700}}&#x60;      Responds with an object telling whenever any errors occured and an array with status for each operation:&lt;br/&gt;   &#x60;&#x60;&#x60;   {&#39;items&#39;:[{&#39;update&#39;:{&#39;_index&#39;:&#39;products&#39;,&#39;_id&#39;:1,&#39;result&#39;:&#39;updated&#39;}},{&#39;update&#39;:{&#39;_index&#39;:&#39;products&#39;,&#39;_id&#39;:2,&#39;result&#39;:&#39;updated&#39;}}],&#39;errors&#39;:false}   &#x60;&#x60;&#x60;   
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of BulkResponse</returns>
        ApiResponse<BulkResponse> BulkWithHttpInfo (string body);
        /// <summary>
        /// Delete a document in an index
        /// </summary>
        /// <remarks>
        /// Delete one or several documents. &lt;br/&gt; The method has 2 ways of deleting: either by id, in case only one document is deleted or by using a  match query, in which case multiple documents can be delete . &lt;br/&gt; Example of input to delete by id: &lt;br/&gt; &#x60;&#x60;&#x60; {&#39;index&#39;:&#39;movies&#39;,&#39;id&#39;:100} &#x60;&#x60;&#x60; &lt;br/&gt; Example of input to delete using a query: &#x60;&#x60;&#x60; {&#39;index&#39;:&#39;movies&#39;,&#39;query&#39;:{&#39;bool&#39;:{&#39;must&#39;:[{&#39;query_string&#39;:&#39;new movie&#39;}]}}} &#x60;&#x60;&#x60; &lt;br/&gt; The match query has same syntax as in for searching. &lt;br/&gt; Responds with an object telling how many documents got deleted: &lt;br/&gt; &#x60;&#x60;&#x60; {&#39;_index&#39;:&#39;products&#39;,&#39;updated&#39;:1} &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteDocumentRequest"></param>
        /// <returns>DeleteResponse</returns>
        DeleteResponse Delete (DeleteDocumentRequest deleteDocumentRequest);

        /// <summary>
        /// Delete a document in an index
        /// </summary>
        /// <remarks>
        /// Delete one or several documents. &lt;br/&gt; The method has 2 ways of deleting: either by id, in case only one document is deleted or by using a  match query, in which case multiple documents can be delete . &lt;br/&gt; Example of input to delete by id: &lt;br/&gt; &#x60;&#x60;&#x60; {&#39;index&#39;:&#39;movies&#39;,&#39;id&#39;:100} &#x60;&#x60;&#x60; &lt;br/&gt; Example of input to delete using a query: &#x60;&#x60;&#x60; {&#39;index&#39;:&#39;movies&#39;,&#39;query&#39;:{&#39;bool&#39;:{&#39;must&#39;:[{&#39;query_string&#39;:&#39;new movie&#39;}]}}} &#x60;&#x60;&#x60; &lt;br/&gt; The match query has same syntax as in for searching. &lt;br/&gt; Responds with an object telling how many documents got deleted: &lt;br/&gt; &#x60;&#x60;&#x60; {&#39;_index&#39;:&#39;products&#39;,&#39;updated&#39;:1} &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteDocumentRequest"></param>
        /// <returns>ApiResponse of DeleteResponse</returns>
        ApiResponse<DeleteResponse> DeleteWithHttpInfo (DeleteDocumentRequest deleteDocumentRequest);
        /// <summary>
        /// Create a new document in an index
        /// </summary>
        /// <remarks>
        /// Insert a document. &lt;br/&gt; Expects an object like: &lt;br/&gt; &#x60;&#x60;&#x60;{&#39;index&#39;:&#39;movies&#39;,&#39;id&#39;:701,&#39;doc&#39;:{&#39;title&#39;:&#39;This is an old movie&#39;,&#39;plot&#39;:&#39;A secret team goes to North Pole&#39;,&#39;year&#39;:1950,&#39;rating&#39;:9.5,&#39;lat&#39;:60.4,&#39;lon&#39;:51.99,&#39;advise&#39;:&#39;PG-13&#39;,&#39;meta&#39;:&#39;{\&quot;keywords\&quot;:{\&quot;travel\&quot;,\&quot;ice\&quot;},\&quot;genre\&quot;:{\&quot;adventure\&quot;}}&#39;,&#39;language&#39;:[2,3]}}&#x60;&#x60;&#x60;. &lt;br/&gt; The document id can also be missing, in which case an autogenerated one will be used: &lt;br/&gt; &#x60;&#x60;&#x60;{&#39;index&#39;:&#39;movies&#39;,&#39;doc&#39;:{&#39;title&#39;:&#39;This is a new movie&#39;,&#39;plot&#39;:&#39;A secret team goes to North Pole&#39;,&#39;year&#39;:2020,&#39;rating&#39;:9.5,&#39;lat&#39;:60.4,&#39;lon&#39;:51.99,&#39;advise&#39;:&#39;PG-13&#39;,&#39;meta&#39;:&#39;{\&quot;keywords\&quot;:{\&quot;travel\&quot;,\&quot;ice\&quot;},\&quot;genre\&quot;:{\&quot;adventure\&quot;}}&#39;,&#39;language&#39;:[2,3]}}&#x60;&#x60;&#x60; &lt;br/&gt; It responds with an object in format: &lt;br/&gt; &#x60;&#x60;&#x60;{&#39;_index&#39;:&#39;products&#39;,&#39;_id&#39;:701,&#39;created&#39;:true,&#39;result&#39;:&#39;created&#39;,&#39;status&#39;:201}&#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="insertDocumentRequest"></param>
        /// <returns>SuccessResponse</returns>
        SuccessResponse Insert (InsertDocumentRequest insertDocumentRequest);

        /// <summary>
        /// Create a new document in an index
        /// </summary>
        /// <remarks>
        /// Insert a document. &lt;br/&gt; Expects an object like: &lt;br/&gt; &#x60;&#x60;&#x60;{&#39;index&#39;:&#39;movies&#39;,&#39;id&#39;:701,&#39;doc&#39;:{&#39;title&#39;:&#39;This is an old movie&#39;,&#39;plot&#39;:&#39;A secret team goes to North Pole&#39;,&#39;year&#39;:1950,&#39;rating&#39;:9.5,&#39;lat&#39;:60.4,&#39;lon&#39;:51.99,&#39;advise&#39;:&#39;PG-13&#39;,&#39;meta&#39;:&#39;{\&quot;keywords\&quot;:{\&quot;travel\&quot;,\&quot;ice\&quot;},\&quot;genre\&quot;:{\&quot;adventure\&quot;}}&#39;,&#39;language&#39;:[2,3]}}&#x60;&#x60;&#x60;. &lt;br/&gt; The document id can also be missing, in which case an autogenerated one will be used: &lt;br/&gt; &#x60;&#x60;&#x60;{&#39;index&#39;:&#39;movies&#39;,&#39;doc&#39;:{&#39;title&#39;:&#39;This is a new movie&#39;,&#39;plot&#39;:&#39;A secret team goes to North Pole&#39;,&#39;year&#39;:2020,&#39;rating&#39;:9.5,&#39;lat&#39;:60.4,&#39;lon&#39;:51.99,&#39;advise&#39;:&#39;PG-13&#39;,&#39;meta&#39;:&#39;{\&quot;keywords\&quot;:{\&quot;travel\&quot;,\&quot;ice\&quot;},\&quot;genre\&quot;:{\&quot;adventure\&quot;}}&#39;,&#39;language&#39;:[2,3]}}&#x60;&#x60;&#x60; &lt;br/&gt; It responds with an object in format: &lt;br/&gt; &#x60;&#x60;&#x60;{&#39;_index&#39;:&#39;products&#39;,&#39;_id&#39;:701,&#39;created&#39;:true,&#39;result&#39;:&#39;created&#39;,&#39;status&#39;:201}&#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="insertDocumentRequest"></param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        ApiResponse<SuccessResponse> InsertWithHttpInfo (InsertDocumentRequest insertDocumentRequest);
        /// <summary>
        /// Replace new document in an index
        /// </summary>
        /// <remarks>
        /// Replace an existing document. Input has same format as &#x60;insert&#x60; operation. &lt;br/&gt; Responds with an object in format: &lt;br/&gt; &#x60;&#x60;&#x60; {&#39;_index&#39;:&#39;products&#39;,&#39;_id&#39;:1,&#39;created&#39;:false,&#39;result&#39;:&#39;updated&#39;,&#39;status&#39;:200} &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="insertDocumentRequest"></param>
        /// <returns>SuccessResponse</returns>
        SuccessResponse Replace (InsertDocumentRequest insertDocumentRequest);

        /// <summary>
        /// Replace new document in an index
        /// </summary>
        /// <remarks>
        /// Replace an existing document. Input has same format as &#x60;insert&#x60; operation. &lt;br/&gt; Responds with an object in format: &lt;br/&gt; &#x60;&#x60;&#x60; {&#39;_index&#39;:&#39;products&#39;,&#39;_id&#39;:1,&#39;created&#39;:false,&#39;result&#39;:&#39;updated&#39;,&#39;status&#39;:200} &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="insertDocumentRequest"></param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        ApiResponse<SuccessResponse> ReplaceWithHttpInfo (InsertDocumentRequest insertDocumentRequest);
        /// <summary>
        /// Update a document in an index
        /// </summary>
        /// <remarks>
        /// Update one or several documents. &lt;br/&gt; The update can be made by passing the id or by using a match query in case multiple documents can be updated. &lt;br/&gt; For example update a document using document id: &lt;br/&gt; &lt;code&gt; {&#39;index&#39;:&#39;movies&#39;,&#39;doc&#39;:{&#39;rating&#39;:9.49},&#39;id&#39;:100} &lt;/code&gt; &lt;br/&gt; And update by using a match query: &lt;br/&gt; &#x60;&#x60;&#x60; {&#39;index&#39;:&#39;movies&#39;,&#39;doc&#39;:{&#39;rating&#39;:9.49},&#39;query&#39;:{&#39;bool&#39;:{&#39;must&#39;:[{&#39;query_string&#39;:&#39;new movie&#39;}]}}} &#x60;&#x60;&#x60;  &lt;br/&gt; The match query has same syntax as for searching. Responds with an object that tells how many documents where updated in format: &lt;br/&gt; &#x60;&#x60;&#x60; {&#39;_index&#39;:&#39;products&#39;,&#39;updated&#39;:1} &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateDocumentRequest"></param>
        /// <returns>UpdateResponse</returns>
        UpdateResponse Update (UpdateDocumentRequest updateDocumentRequest);

        /// <summary>
        /// Update a document in an index
        /// </summary>
        /// <remarks>
        /// Update one or several documents. &lt;br/&gt; The update can be made by passing the id or by using a match query in case multiple documents can be updated. &lt;br/&gt; For example update a document using document id: &lt;br/&gt; &lt;code&gt; {&#39;index&#39;:&#39;movies&#39;,&#39;doc&#39;:{&#39;rating&#39;:9.49},&#39;id&#39;:100} &lt;/code&gt; &lt;br/&gt; And update by using a match query: &lt;br/&gt; &#x60;&#x60;&#x60; {&#39;index&#39;:&#39;movies&#39;,&#39;doc&#39;:{&#39;rating&#39;:9.49},&#39;query&#39;:{&#39;bool&#39;:{&#39;must&#39;:[{&#39;query_string&#39;:&#39;new movie&#39;}]}}} &#x60;&#x60;&#x60;  &lt;br/&gt; The match query has same syntax as for searching. Responds with an object that tells how many documents where updated in format: &lt;br/&gt; &#x60;&#x60;&#x60; {&#39;_index&#39;:&#39;products&#39;,&#39;updated&#39;:1} &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateDocumentRequest"></param>
        /// <returns>ApiResponse of UpdateResponse</returns>
        ApiResponse<UpdateResponse> UpdateWithHttpInfo (UpdateDocumentRequest updateDocumentRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Bulk index operations
        /// </summary>
        /// <remarks>
        /// Sends multiple operatons like inserts, updates, replaces or deletes. &lt;br/&gt; For each operation it&#39;s object must have same format as in their dedicated method. &lt;br/&gt; The method expects a raw string as the batch in NDJSON.  Each operation object needs to be serialized to   JSON and separated by endline (\\n). &lt;br/&gt;     An example of raw input:      &#x60;{\&quot;insert\&quot;: {\&quot;index\&quot;: \&quot;movies\&quot;, \&quot;doc\&quot;: {\&quot;plot\&quot;: \&quot;A secret team goes to North Pole\&quot;, \&quot;rating\&quot;: 9.5, \&quot;language\&quot;: [2, 3], \&quot;title\&quot;: \&quot;This is an older movie\&quot;, \&quot;lon\&quot;: 51.99, \&quot;meta\&quot;: {\&quot;keywords\&quot;:[\&quot;travel\&quot;,\&quot;ice\&quot;],\&quot;genre\&quot;:[\&quot;adventure\&quot;]}, \&quot;year\&quot;: 1950, \&quot;lat\&quot;: 60.4, \&quot;advise\&quot;: \&quot;PG-13\&quot;}}}\\n{\&quot;delete\&quot;: {\&quot;index\&quot;: \&quot;movies\&quot;,\&quot;id\&quot;:700}}&#x60;      Responds with an object telling whenever any errors occured and an array with status for each operation:&lt;br/&gt;   &#x60;&#x60;&#x60;   {&#39;items&#39;:[{&#39;update&#39;:{&#39;_index&#39;:&#39;products&#39;,&#39;_id&#39;:1,&#39;result&#39;:&#39;updated&#39;}},{&#39;update&#39;:{&#39;_index&#39;:&#39;products&#39;,&#39;_id&#39;:2,&#39;result&#39;:&#39;updated&#39;}}],&#39;errors&#39;:false}   &#x60;&#x60;&#x60;   
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BulkResponse</returns>
        System.Threading.Tasks.Task<BulkResponse> BulkAsync (string body, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Bulk index operations
        /// </summary>
        /// <remarks>
        /// Sends multiple operatons like inserts, updates, replaces or deletes. &lt;br/&gt; For each operation it&#39;s object must have same format as in their dedicated method. &lt;br/&gt; The method expects a raw string as the batch in NDJSON.  Each operation object needs to be serialized to   JSON and separated by endline (\\n). &lt;br/&gt;     An example of raw input:      &#x60;{\&quot;insert\&quot;: {\&quot;index\&quot;: \&quot;movies\&quot;, \&quot;doc\&quot;: {\&quot;plot\&quot;: \&quot;A secret team goes to North Pole\&quot;, \&quot;rating\&quot;: 9.5, \&quot;language\&quot;: [2, 3], \&quot;title\&quot;: \&quot;This is an older movie\&quot;, \&quot;lon\&quot;: 51.99, \&quot;meta\&quot;: {\&quot;keywords\&quot;:[\&quot;travel\&quot;,\&quot;ice\&quot;],\&quot;genre\&quot;:[\&quot;adventure\&quot;]}, \&quot;year\&quot;: 1950, \&quot;lat\&quot;: 60.4, \&quot;advise\&quot;: \&quot;PG-13\&quot;}}}\\n{\&quot;delete\&quot;: {\&quot;index\&quot;: \&quot;movies\&quot;,\&quot;id\&quot;:700}}&#x60;      Responds with an object telling whenever any errors occured and an array with status for each operation:&lt;br/&gt;   &#x60;&#x60;&#x60;   {&#39;items&#39;:[{&#39;update&#39;:{&#39;_index&#39;:&#39;products&#39;,&#39;_id&#39;:1,&#39;result&#39;:&#39;updated&#39;}},{&#39;update&#39;:{&#39;_index&#39;:&#39;products&#39;,&#39;_id&#39;:2,&#39;result&#39;:&#39;updated&#39;}}],&#39;errors&#39;:false}   &#x60;&#x60;&#x60;   
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BulkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BulkResponse>> BulkAsyncWithHttpInfo (string body, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete a document in an index
        /// </summary>
        /// <remarks>
        /// Delete one or several documents. &lt;br/&gt; The method has 2 ways of deleting: either by id, in case only one document is deleted or by using a  match query, in which case multiple documents can be delete . &lt;br/&gt; Example of input to delete by id: &lt;br/&gt; &#x60;&#x60;&#x60; {&#39;index&#39;:&#39;movies&#39;,&#39;id&#39;:100} &#x60;&#x60;&#x60; &lt;br/&gt; Example of input to delete using a query: &#x60;&#x60;&#x60; {&#39;index&#39;:&#39;movies&#39;,&#39;query&#39;:{&#39;bool&#39;:{&#39;must&#39;:[{&#39;query_string&#39;:&#39;new movie&#39;}]}}} &#x60;&#x60;&#x60; &lt;br/&gt; The match query has same syntax as in for searching. &lt;br/&gt; Responds with an object telling how many documents got deleted: &lt;br/&gt; &#x60;&#x60;&#x60; {&#39;_index&#39;:&#39;products&#39;,&#39;updated&#39;:1} &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteDocumentRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DeleteResponse</returns>
        System.Threading.Tasks.Task<DeleteResponse> DeleteAsync (DeleteDocumentRequest deleteDocumentRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a document in an index
        /// </summary>
        /// <remarks>
        /// Delete one or several documents. &lt;br/&gt; The method has 2 ways of deleting: either by id, in case only one document is deleted or by using a  match query, in which case multiple documents can be delete . &lt;br/&gt; Example of input to delete by id: &lt;br/&gt; &#x60;&#x60;&#x60; {&#39;index&#39;:&#39;movies&#39;,&#39;id&#39;:100} &#x60;&#x60;&#x60; &lt;br/&gt; Example of input to delete using a query: &#x60;&#x60;&#x60; {&#39;index&#39;:&#39;movies&#39;,&#39;query&#39;:{&#39;bool&#39;:{&#39;must&#39;:[{&#39;query_string&#39;:&#39;new movie&#39;}]}}} &#x60;&#x60;&#x60; &lt;br/&gt; The match query has same syntax as in for searching. &lt;br/&gt; Responds with an object telling how many documents got deleted: &lt;br/&gt; &#x60;&#x60;&#x60; {&#39;_index&#39;:&#39;products&#39;,&#39;updated&#39;:1} &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteDocumentRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DeleteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteResponse>> DeleteAsyncWithHttpInfo (DeleteDocumentRequest deleteDocumentRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create a new document in an index
        /// </summary>
        /// <remarks>
        /// Insert a document. &lt;br/&gt; Expects an object like: &lt;br/&gt; &#x60;&#x60;&#x60;{&#39;index&#39;:&#39;movies&#39;,&#39;id&#39;:701,&#39;doc&#39;:{&#39;title&#39;:&#39;This is an old movie&#39;,&#39;plot&#39;:&#39;A secret team goes to North Pole&#39;,&#39;year&#39;:1950,&#39;rating&#39;:9.5,&#39;lat&#39;:60.4,&#39;lon&#39;:51.99,&#39;advise&#39;:&#39;PG-13&#39;,&#39;meta&#39;:&#39;{\&quot;keywords\&quot;:{\&quot;travel\&quot;,\&quot;ice\&quot;},\&quot;genre\&quot;:{\&quot;adventure\&quot;}}&#39;,&#39;language&#39;:[2,3]}}&#x60;&#x60;&#x60;. &lt;br/&gt; The document id can also be missing, in which case an autogenerated one will be used: &lt;br/&gt; &#x60;&#x60;&#x60;{&#39;index&#39;:&#39;movies&#39;,&#39;doc&#39;:{&#39;title&#39;:&#39;This is a new movie&#39;,&#39;plot&#39;:&#39;A secret team goes to North Pole&#39;,&#39;year&#39;:2020,&#39;rating&#39;:9.5,&#39;lat&#39;:60.4,&#39;lon&#39;:51.99,&#39;advise&#39;:&#39;PG-13&#39;,&#39;meta&#39;:&#39;{\&quot;keywords\&quot;:{\&quot;travel\&quot;,\&quot;ice\&quot;},\&quot;genre\&quot;:{\&quot;adventure\&quot;}}&#39;,&#39;language&#39;:[2,3]}}&#x60;&#x60;&#x60; &lt;br/&gt; It responds with an object in format: &lt;br/&gt; &#x60;&#x60;&#x60;{&#39;_index&#39;:&#39;products&#39;,&#39;_id&#39;:701,&#39;created&#39;:true,&#39;result&#39;:&#39;created&#39;,&#39;status&#39;:201}&#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="insertDocumentRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SuccessResponse</returns>
        System.Threading.Tasks.Task<SuccessResponse> InsertAsync (InsertDocumentRequest insertDocumentRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new document in an index
        /// </summary>
        /// <remarks>
        /// Insert a document. &lt;br/&gt; Expects an object like: &lt;br/&gt; &#x60;&#x60;&#x60;{&#39;index&#39;:&#39;movies&#39;,&#39;id&#39;:701,&#39;doc&#39;:{&#39;title&#39;:&#39;This is an old movie&#39;,&#39;plot&#39;:&#39;A secret team goes to North Pole&#39;,&#39;year&#39;:1950,&#39;rating&#39;:9.5,&#39;lat&#39;:60.4,&#39;lon&#39;:51.99,&#39;advise&#39;:&#39;PG-13&#39;,&#39;meta&#39;:&#39;{\&quot;keywords\&quot;:{\&quot;travel\&quot;,\&quot;ice\&quot;},\&quot;genre\&quot;:{\&quot;adventure\&quot;}}&#39;,&#39;language&#39;:[2,3]}}&#x60;&#x60;&#x60;. &lt;br/&gt; The document id can also be missing, in which case an autogenerated one will be used: &lt;br/&gt; &#x60;&#x60;&#x60;{&#39;index&#39;:&#39;movies&#39;,&#39;doc&#39;:{&#39;title&#39;:&#39;This is a new movie&#39;,&#39;plot&#39;:&#39;A secret team goes to North Pole&#39;,&#39;year&#39;:2020,&#39;rating&#39;:9.5,&#39;lat&#39;:60.4,&#39;lon&#39;:51.99,&#39;advise&#39;:&#39;PG-13&#39;,&#39;meta&#39;:&#39;{\&quot;keywords\&quot;:{\&quot;travel\&quot;,\&quot;ice\&quot;},\&quot;genre\&quot;:{\&quot;adventure\&quot;}}&#39;,&#39;language&#39;:[2,3]}}&#x60;&#x60;&#x60; &lt;br/&gt; It responds with an object in format: &lt;br/&gt; &#x60;&#x60;&#x60;{&#39;_index&#39;:&#39;products&#39;,&#39;_id&#39;:701,&#39;created&#39;:true,&#39;result&#39;:&#39;created&#39;,&#39;status&#39;:201}&#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="insertDocumentRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> InsertAsyncWithHttpInfo (InsertDocumentRequest insertDocumentRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Replace new document in an index
        /// </summary>
        /// <remarks>
        /// Replace an existing document. Input has same format as &#x60;insert&#x60; operation. &lt;br/&gt; Responds with an object in format: &lt;br/&gt; &#x60;&#x60;&#x60; {&#39;_index&#39;:&#39;products&#39;,&#39;_id&#39;:1,&#39;created&#39;:false,&#39;result&#39;:&#39;updated&#39;,&#39;status&#39;:200} &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="insertDocumentRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SuccessResponse</returns>
        System.Threading.Tasks.Task<SuccessResponse> ReplaceAsync (InsertDocumentRequest insertDocumentRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Replace new document in an index
        /// </summary>
        /// <remarks>
        /// Replace an existing document. Input has same format as &#x60;insert&#x60; operation. &lt;br/&gt; Responds with an object in format: &lt;br/&gt; &#x60;&#x60;&#x60; {&#39;_index&#39;:&#39;products&#39;,&#39;_id&#39;:1,&#39;created&#39;:false,&#39;result&#39;:&#39;updated&#39;,&#39;status&#39;:200} &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="insertDocumentRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> ReplaceAsyncWithHttpInfo (InsertDocumentRequest insertDocumentRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update a document in an index
        /// </summary>
        /// <remarks>
        /// Update one or several documents. &lt;br/&gt; The update can be made by passing the id or by using a match query in case multiple documents can be updated. &lt;br/&gt; For example update a document using document id: &lt;br/&gt; &lt;code&gt; {&#39;index&#39;:&#39;movies&#39;,&#39;doc&#39;:{&#39;rating&#39;:9.49},&#39;id&#39;:100} &lt;/code&gt; &lt;br/&gt; And update by using a match query: &lt;br/&gt; &#x60;&#x60;&#x60; {&#39;index&#39;:&#39;movies&#39;,&#39;doc&#39;:{&#39;rating&#39;:9.49},&#39;query&#39;:{&#39;bool&#39;:{&#39;must&#39;:[{&#39;query_string&#39;:&#39;new movie&#39;}]}}} &#x60;&#x60;&#x60;  &lt;br/&gt; The match query has same syntax as for searching. Responds with an object that tells how many documents where updated in format: &lt;br/&gt; &#x60;&#x60;&#x60; {&#39;_index&#39;:&#39;products&#39;,&#39;updated&#39;:1} &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateDocumentRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UpdateResponse</returns>
        System.Threading.Tasks.Task<UpdateResponse> UpdateAsync (UpdateDocumentRequest updateDocumentRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update a document in an index
        /// </summary>
        /// <remarks>
        /// Update one or several documents. &lt;br/&gt; The update can be made by passing the id or by using a match query in case multiple documents can be updated. &lt;br/&gt; For example update a document using document id: &lt;br/&gt; &lt;code&gt; {&#39;index&#39;:&#39;movies&#39;,&#39;doc&#39;:{&#39;rating&#39;:9.49},&#39;id&#39;:100} &lt;/code&gt; &lt;br/&gt; And update by using a match query: &lt;br/&gt; &#x60;&#x60;&#x60; {&#39;index&#39;:&#39;movies&#39;,&#39;doc&#39;:{&#39;rating&#39;:9.49},&#39;query&#39;:{&#39;bool&#39;:{&#39;must&#39;:[{&#39;query_string&#39;:&#39;new movie&#39;}]}}} &#x60;&#x60;&#x60;  &lt;br/&gt; The match query has same syntax as for searching. Responds with an object that tells how many documents where updated in format: &lt;br/&gt; &#x60;&#x60;&#x60; {&#39;_index&#39;:&#39;products&#39;,&#39;updated&#39;:1} &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateDocumentRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UpdateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateResponse>> UpdateAsyncWithHttpInfo (UpdateDocumentRequest updateDocumentRequest, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class IndexApi : IIndexApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="IndexApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IndexApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IndexApi"/> class
        /// </summary>
        /// <returns></returns>
        public IndexApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IndexApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public IndexApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Bulk index operations Sends multiple operatons like inserts, updates, replaces or deletes. &lt;br/&gt; For each operation it&#39;s object must have same format as in their dedicated method. &lt;br/&gt; The method expects a raw string as the batch in NDJSON.  Each operation object needs to be serialized to   JSON and separated by endline (\\n). &lt;br/&gt;     An example of raw input:      &#x60;{\&quot;insert\&quot;: {\&quot;index\&quot;: \&quot;movies\&quot;, \&quot;doc\&quot;: {\&quot;plot\&quot;: \&quot;A secret team goes to North Pole\&quot;, \&quot;rating\&quot;: 9.5, \&quot;language\&quot;: [2, 3], \&quot;title\&quot;: \&quot;This is an older movie\&quot;, \&quot;lon\&quot;: 51.99, \&quot;meta\&quot;: {\&quot;keywords\&quot;:[\&quot;travel\&quot;,\&quot;ice\&quot;],\&quot;genre\&quot;:[\&quot;adventure\&quot;]}, \&quot;year\&quot;: 1950, \&quot;lat\&quot;: 60.4, \&quot;advise\&quot;: \&quot;PG-13\&quot;}}}\\n{\&quot;delete\&quot;: {\&quot;index\&quot;: \&quot;movies\&quot;,\&quot;id\&quot;:700}}&#x60;      Responds with an object telling whenever any errors occured and an array with status for each operation:&lt;br/&gt;   &#x60;&#x60;&#x60;   {&#39;items&#39;:[{&#39;update&#39;:{&#39;_index&#39;:&#39;products&#39;,&#39;_id&#39;:1,&#39;result&#39;:&#39;updated&#39;}},{&#39;update&#39;:{&#39;_index&#39;:&#39;products&#39;,&#39;_id&#39;:2,&#39;result&#39;:&#39;updated&#39;}}],&#39;errors&#39;:false}   &#x60;&#x60;&#x60;   
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>BulkResponse</returns>
        public BulkResponse Bulk (string body)
        {
             ApiResponse<BulkResponse> localVarResponse = BulkWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Bulk index operations Sends multiple operatons like inserts, updates, replaces or deletes. &lt;br/&gt; For each operation it&#39;s object must have same format as in their dedicated method. &lt;br/&gt; The method expects a raw string as the batch in NDJSON.  Each operation object needs to be serialized to   JSON and separated by endline (\\n). &lt;br/&gt;     An example of raw input:      &#x60;{\&quot;insert\&quot;: {\&quot;index\&quot;: \&quot;movies\&quot;, \&quot;doc\&quot;: {\&quot;plot\&quot;: \&quot;A secret team goes to North Pole\&quot;, \&quot;rating\&quot;: 9.5, \&quot;language\&quot;: [2, 3], \&quot;title\&quot;: \&quot;This is an older movie\&quot;, \&quot;lon\&quot;: 51.99, \&quot;meta\&quot;: {\&quot;keywords\&quot;:[\&quot;travel\&quot;,\&quot;ice\&quot;],\&quot;genre\&quot;:[\&quot;adventure\&quot;]}, \&quot;year\&quot;: 1950, \&quot;lat\&quot;: 60.4, \&quot;advise\&quot;: \&quot;PG-13\&quot;}}}\\n{\&quot;delete\&quot;: {\&quot;index\&quot;: \&quot;movies\&quot;,\&quot;id\&quot;:700}}&#x60;      Responds with an object telling whenever any errors occured and an array with status for each operation:&lt;br/&gt;   &#x60;&#x60;&#x60;   {&#39;items&#39;:[{&#39;update&#39;:{&#39;_index&#39;:&#39;products&#39;,&#39;_id&#39;:1,&#39;result&#39;:&#39;updated&#39;}},{&#39;update&#39;:{&#39;_index&#39;:&#39;products&#39;,&#39;_id&#39;:2,&#39;result&#39;:&#39;updated&#39;}}],&#39;errors&#39;:false}   &#x60;&#x60;&#x60;   
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of BulkResponse</returns>
        public ApiResponse<BulkResponse> BulkWithHttpInfo (string body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling IndexApi->Bulk");

            var localVarPath = "/json/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-ndjson"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Bulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BulkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BulkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BulkResponse)));
        }

        /// <summary>
        /// Bulk index operations Sends multiple operatons like inserts, updates, replaces or deletes. &lt;br/&gt; For each operation it&#39;s object must have same format as in their dedicated method. &lt;br/&gt; The method expects a raw string as the batch in NDJSON.  Each operation object needs to be serialized to   JSON and separated by endline (\\n). &lt;br/&gt;     An example of raw input:      &#x60;{\&quot;insert\&quot;: {\&quot;index\&quot;: \&quot;movies\&quot;, \&quot;doc\&quot;: {\&quot;plot\&quot;: \&quot;A secret team goes to North Pole\&quot;, \&quot;rating\&quot;: 9.5, \&quot;language\&quot;: [2, 3], \&quot;title\&quot;: \&quot;This is an older movie\&quot;, \&quot;lon\&quot;: 51.99, \&quot;meta\&quot;: {\&quot;keywords\&quot;:[\&quot;travel\&quot;,\&quot;ice\&quot;],\&quot;genre\&quot;:[\&quot;adventure\&quot;]}, \&quot;year\&quot;: 1950, \&quot;lat\&quot;: 60.4, \&quot;advise\&quot;: \&quot;PG-13\&quot;}}}\\n{\&quot;delete\&quot;: {\&quot;index\&quot;: \&quot;movies\&quot;,\&quot;id\&quot;:700}}&#x60;      Responds with an object telling whenever any errors occured and an array with status for each operation:&lt;br/&gt;   &#x60;&#x60;&#x60;   {&#39;items&#39;:[{&#39;update&#39;:{&#39;_index&#39;:&#39;products&#39;,&#39;_id&#39;:1,&#39;result&#39;:&#39;updated&#39;}},{&#39;update&#39;:{&#39;_index&#39;:&#39;products&#39;,&#39;_id&#39;:2,&#39;result&#39;:&#39;updated&#39;}}],&#39;errors&#39;:false}   &#x60;&#x60;&#x60;   
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BulkResponse</returns>
        public async System.Threading.Tasks.Task<BulkResponse> BulkAsync (string body, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<BulkResponse> localVarResponse = await BulkAsyncWithHttpInfo(body, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Bulk index operations Sends multiple operatons like inserts, updates, replaces or deletes. &lt;br/&gt; For each operation it&#39;s object must have same format as in their dedicated method. &lt;br/&gt; The method expects a raw string as the batch in NDJSON.  Each operation object needs to be serialized to   JSON and separated by endline (\\n). &lt;br/&gt;     An example of raw input:      &#x60;{\&quot;insert\&quot;: {\&quot;index\&quot;: \&quot;movies\&quot;, \&quot;doc\&quot;: {\&quot;plot\&quot;: \&quot;A secret team goes to North Pole\&quot;, \&quot;rating\&quot;: 9.5, \&quot;language\&quot;: [2, 3], \&quot;title\&quot;: \&quot;This is an older movie\&quot;, \&quot;lon\&quot;: 51.99, \&quot;meta\&quot;: {\&quot;keywords\&quot;:[\&quot;travel\&quot;,\&quot;ice\&quot;],\&quot;genre\&quot;:[\&quot;adventure\&quot;]}, \&quot;year\&quot;: 1950, \&quot;lat\&quot;: 60.4, \&quot;advise\&quot;: \&quot;PG-13\&quot;}}}\\n{\&quot;delete\&quot;: {\&quot;index\&quot;: \&quot;movies\&quot;,\&quot;id\&quot;:700}}&#x60;      Responds with an object telling whenever any errors occured and an array with status for each operation:&lt;br/&gt;   &#x60;&#x60;&#x60;   {&#39;items&#39;:[{&#39;update&#39;:{&#39;_index&#39;:&#39;products&#39;,&#39;_id&#39;:1,&#39;result&#39;:&#39;updated&#39;}},{&#39;update&#39;:{&#39;_index&#39;:&#39;products&#39;,&#39;_id&#39;:2,&#39;result&#39;:&#39;updated&#39;}}],&#39;errors&#39;:false}   &#x60;&#x60;&#x60;   
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BulkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BulkResponse>> BulkAsyncWithHttpInfo (string body, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling IndexApi->Bulk");

            var localVarPath = "/json/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-ndjson"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Bulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BulkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BulkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BulkResponse)));
        }

        /// <summary>
        /// Delete a document in an index Delete one or several documents. &lt;br/&gt; The method has 2 ways of deleting: either by id, in case only one document is deleted or by using a  match query, in which case multiple documents can be delete . &lt;br/&gt; Example of input to delete by id: &lt;br/&gt; &#x60;&#x60;&#x60; {&#39;index&#39;:&#39;movies&#39;,&#39;id&#39;:100} &#x60;&#x60;&#x60; &lt;br/&gt; Example of input to delete using a query: &#x60;&#x60;&#x60; {&#39;index&#39;:&#39;movies&#39;,&#39;query&#39;:{&#39;bool&#39;:{&#39;must&#39;:[{&#39;query_string&#39;:&#39;new movie&#39;}]}}} &#x60;&#x60;&#x60; &lt;br/&gt; The match query has same syntax as in for searching. &lt;br/&gt; Responds with an object telling how many documents got deleted: &lt;br/&gt; &#x60;&#x60;&#x60; {&#39;_index&#39;:&#39;products&#39;,&#39;updated&#39;:1} &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteDocumentRequest"></param>
        /// <returns>DeleteResponse</returns>
        public DeleteResponse Delete (DeleteDocumentRequest deleteDocumentRequest)
        {
             ApiResponse<DeleteResponse> localVarResponse = DeleteWithHttpInfo(deleteDocumentRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a document in an index Delete one or several documents. &lt;br/&gt; The method has 2 ways of deleting: either by id, in case only one document is deleted or by using a  match query, in which case multiple documents can be delete . &lt;br/&gt; Example of input to delete by id: &lt;br/&gt; &#x60;&#x60;&#x60; {&#39;index&#39;:&#39;movies&#39;,&#39;id&#39;:100} &#x60;&#x60;&#x60; &lt;br/&gt; Example of input to delete using a query: &#x60;&#x60;&#x60; {&#39;index&#39;:&#39;movies&#39;,&#39;query&#39;:{&#39;bool&#39;:{&#39;must&#39;:[{&#39;query_string&#39;:&#39;new movie&#39;}]}}} &#x60;&#x60;&#x60; &lt;br/&gt; The match query has same syntax as in for searching. &lt;br/&gt; Responds with an object telling how many documents got deleted: &lt;br/&gt; &#x60;&#x60;&#x60; {&#39;_index&#39;:&#39;products&#39;,&#39;updated&#39;:1} &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteDocumentRequest"></param>
        /// <returns>ApiResponse of DeleteResponse</returns>
        public ApiResponse<DeleteResponse> DeleteWithHttpInfo (DeleteDocumentRequest deleteDocumentRequest)
        {
            // verify the required parameter 'deleteDocumentRequest' is set
            if (deleteDocumentRequest == null)
                throw new ApiException(400, "Missing required parameter 'deleteDocumentRequest' when calling IndexApi->Delete");

            var localVarPath = "/json/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deleteDocumentRequest != null && deleteDocumentRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteDocumentRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteDocumentRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Delete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeleteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteResponse)));
        }

        /// <summary>
        /// Delete a document in an index Delete one or several documents. &lt;br/&gt; The method has 2 ways of deleting: either by id, in case only one document is deleted or by using a  match query, in which case multiple documents can be delete . &lt;br/&gt; Example of input to delete by id: &lt;br/&gt; &#x60;&#x60;&#x60; {&#39;index&#39;:&#39;movies&#39;,&#39;id&#39;:100} &#x60;&#x60;&#x60; &lt;br/&gt; Example of input to delete using a query: &#x60;&#x60;&#x60; {&#39;index&#39;:&#39;movies&#39;,&#39;query&#39;:{&#39;bool&#39;:{&#39;must&#39;:[{&#39;query_string&#39;:&#39;new movie&#39;}]}}} &#x60;&#x60;&#x60; &lt;br/&gt; The match query has same syntax as in for searching. &lt;br/&gt; Responds with an object telling how many documents got deleted: &lt;br/&gt; &#x60;&#x60;&#x60; {&#39;_index&#39;:&#39;products&#39;,&#39;updated&#39;:1} &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteDocumentRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DeleteResponse</returns>
        public async System.Threading.Tasks.Task<DeleteResponse> DeleteAsync (DeleteDocumentRequest deleteDocumentRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DeleteResponse> localVarResponse = await DeleteAsyncWithHttpInfo(deleteDocumentRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a document in an index Delete one or several documents. &lt;br/&gt; The method has 2 ways of deleting: either by id, in case only one document is deleted or by using a  match query, in which case multiple documents can be delete . &lt;br/&gt; Example of input to delete by id: &lt;br/&gt; &#x60;&#x60;&#x60; {&#39;index&#39;:&#39;movies&#39;,&#39;id&#39;:100} &#x60;&#x60;&#x60; &lt;br/&gt; Example of input to delete using a query: &#x60;&#x60;&#x60; {&#39;index&#39;:&#39;movies&#39;,&#39;query&#39;:{&#39;bool&#39;:{&#39;must&#39;:[{&#39;query_string&#39;:&#39;new movie&#39;}]}}} &#x60;&#x60;&#x60; &lt;br/&gt; The match query has same syntax as in for searching. &lt;br/&gt; Responds with an object telling how many documents got deleted: &lt;br/&gt; &#x60;&#x60;&#x60; {&#39;_index&#39;:&#39;products&#39;,&#39;updated&#39;:1} &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteDocumentRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DeleteResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeleteResponse>> DeleteAsyncWithHttpInfo (DeleteDocumentRequest deleteDocumentRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'deleteDocumentRequest' is set
            if (deleteDocumentRequest == null)
                throw new ApiException(400, "Missing required parameter 'deleteDocumentRequest' when calling IndexApi->Delete");

            var localVarPath = "/json/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deleteDocumentRequest != null && deleteDocumentRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteDocumentRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteDocumentRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Delete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeleteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteResponse)));
        }

        /// <summary>
        /// Create a new document in an index Insert a document. &lt;br/&gt; Expects an object like: &lt;br/&gt; &#x60;&#x60;&#x60;{&#39;index&#39;:&#39;movies&#39;,&#39;id&#39;:701,&#39;doc&#39;:{&#39;title&#39;:&#39;This is an old movie&#39;,&#39;plot&#39;:&#39;A secret team goes to North Pole&#39;,&#39;year&#39;:1950,&#39;rating&#39;:9.5,&#39;lat&#39;:60.4,&#39;lon&#39;:51.99,&#39;advise&#39;:&#39;PG-13&#39;,&#39;meta&#39;:&#39;{\&quot;keywords\&quot;:{\&quot;travel\&quot;,\&quot;ice\&quot;},\&quot;genre\&quot;:{\&quot;adventure\&quot;}}&#39;,&#39;language&#39;:[2,3]}}&#x60;&#x60;&#x60;. &lt;br/&gt; The document id can also be missing, in which case an autogenerated one will be used: &lt;br/&gt; &#x60;&#x60;&#x60;{&#39;index&#39;:&#39;movies&#39;,&#39;doc&#39;:{&#39;title&#39;:&#39;This is a new movie&#39;,&#39;plot&#39;:&#39;A secret team goes to North Pole&#39;,&#39;year&#39;:2020,&#39;rating&#39;:9.5,&#39;lat&#39;:60.4,&#39;lon&#39;:51.99,&#39;advise&#39;:&#39;PG-13&#39;,&#39;meta&#39;:&#39;{\&quot;keywords\&quot;:{\&quot;travel\&quot;,\&quot;ice\&quot;},\&quot;genre\&quot;:{\&quot;adventure\&quot;}}&#39;,&#39;language&#39;:[2,3]}}&#x60;&#x60;&#x60; &lt;br/&gt; It responds with an object in format: &lt;br/&gt; &#x60;&#x60;&#x60;{&#39;_index&#39;:&#39;products&#39;,&#39;_id&#39;:701,&#39;created&#39;:true,&#39;result&#39;:&#39;created&#39;,&#39;status&#39;:201}&#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="insertDocumentRequest"></param>
        /// <returns>SuccessResponse</returns>
        public SuccessResponse Insert (InsertDocumentRequest insertDocumentRequest)
        {
             ApiResponse<SuccessResponse> localVarResponse = InsertWithHttpInfo(insertDocumentRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new document in an index Insert a document. &lt;br/&gt; Expects an object like: &lt;br/&gt; &#x60;&#x60;&#x60;{&#39;index&#39;:&#39;movies&#39;,&#39;id&#39;:701,&#39;doc&#39;:{&#39;title&#39;:&#39;This is an old movie&#39;,&#39;plot&#39;:&#39;A secret team goes to North Pole&#39;,&#39;year&#39;:1950,&#39;rating&#39;:9.5,&#39;lat&#39;:60.4,&#39;lon&#39;:51.99,&#39;advise&#39;:&#39;PG-13&#39;,&#39;meta&#39;:&#39;{\&quot;keywords\&quot;:{\&quot;travel\&quot;,\&quot;ice\&quot;},\&quot;genre\&quot;:{\&quot;adventure\&quot;}}&#39;,&#39;language&#39;:[2,3]}}&#x60;&#x60;&#x60;. &lt;br/&gt; The document id can also be missing, in which case an autogenerated one will be used: &lt;br/&gt; &#x60;&#x60;&#x60;{&#39;index&#39;:&#39;movies&#39;,&#39;doc&#39;:{&#39;title&#39;:&#39;This is a new movie&#39;,&#39;plot&#39;:&#39;A secret team goes to North Pole&#39;,&#39;year&#39;:2020,&#39;rating&#39;:9.5,&#39;lat&#39;:60.4,&#39;lon&#39;:51.99,&#39;advise&#39;:&#39;PG-13&#39;,&#39;meta&#39;:&#39;{\&quot;keywords\&quot;:{\&quot;travel\&quot;,\&quot;ice\&quot;},\&quot;genre\&quot;:{\&quot;adventure\&quot;}}&#39;,&#39;language&#39;:[2,3]}}&#x60;&#x60;&#x60; &lt;br/&gt; It responds with an object in format: &lt;br/&gt; &#x60;&#x60;&#x60;{&#39;_index&#39;:&#39;products&#39;,&#39;_id&#39;:701,&#39;created&#39;:true,&#39;result&#39;:&#39;created&#39;,&#39;status&#39;:201}&#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="insertDocumentRequest"></param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        public ApiResponse<SuccessResponse> InsertWithHttpInfo (InsertDocumentRequest insertDocumentRequest)
        {
            // verify the required parameter 'insertDocumentRequest' is set
            if (insertDocumentRequest == null)
                throw new ApiException(400, "Missing required parameter 'insertDocumentRequest' when calling IndexApi->Insert");

            var localVarPath = "/json/insert";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (insertDocumentRequest != null && insertDocumentRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(insertDocumentRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = insertDocumentRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Insert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SuccessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse)));
        }

        /// <summary>
        /// Create a new document in an index Insert a document. &lt;br/&gt; Expects an object like: &lt;br/&gt; &#x60;&#x60;&#x60;{&#39;index&#39;:&#39;movies&#39;,&#39;id&#39;:701,&#39;doc&#39;:{&#39;title&#39;:&#39;This is an old movie&#39;,&#39;plot&#39;:&#39;A secret team goes to North Pole&#39;,&#39;year&#39;:1950,&#39;rating&#39;:9.5,&#39;lat&#39;:60.4,&#39;lon&#39;:51.99,&#39;advise&#39;:&#39;PG-13&#39;,&#39;meta&#39;:&#39;{\&quot;keywords\&quot;:{\&quot;travel\&quot;,\&quot;ice\&quot;},\&quot;genre\&quot;:{\&quot;adventure\&quot;}}&#39;,&#39;language&#39;:[2,3]}}&#x60;&#x60;&#x60;. &lt;br/&gt; The document id can also be missing, in which case an autogenerated one will be used: &lt;br/&gt; &#x60;&#x60;&#x60;{&#39;index&#39;:&#39;movies&#39;,&#39;doc&#39;:{&#39;title&#39;:&#39;This is a new movie&#39;,&#39;plot&#39;:&#39;A secret team goes to North Pole&#39;,&#39;year&#39;:2020,&#39;rating&#39;:9.5,&#39;lat&#39;:60.4,&#39;lon&#39;:51.99,&#39;advise&#39;:&#39;PG-13&#39;,&#39;meta&#39;:&#39;{\&quot;keywords\&quot;:{\&quot;travel\&quot;,\&quot;ice\&quot;},\&quot;genre\&quot;:{\&quot;adventure\&quot;}}&#39;,&#39;language&#39;:[2,3]}}&#x60;&#x60;&#x60; &lt;br/&gt; It responds with an object in format: &lt;br/&gt; &#x60;&#x60;&#x60;{&#39;_index&#39;:&#39;products&#39;,&#39;_id&#39;:701,&#39;created&#39;:true,&#39;result&#39;:&#39;created&#39;,&#39;status&#39;:201}&#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="insertDocumentRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SuccessResponse</returns>
        public async System.Threading.Tasks.Task<SuccessResponse> InsertAsync (InsertDocumentRequest insertDocumentRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SuccessResponse> localVarResponse = await InsertAsyncWithHttpInfo(insertDocumentRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new document in an index Insert a document. &lt;br/&gt; Expects an object like: &lt;br/&gt; &#x60;&#x60;&#x60;{&#39;index&#39;:&#39;movies&#39;,&#39;id&#39;:701,&#39;doc&#39;:{&#39;title&#39;:&#39;This is an old movie&#39;,&#39;plot&#39;:&#39;A secret team goes to North Pole&#39;,&#39;year&#39;:1950,&#39;rating&#39;:9.5,&#39;lat&#39;:60.4,&#39;lon&#39;:51.99,&#39;advise&#39;:&#39;PG-13&#39;,&#39;meta&#39;:&#39;{\&quot;keywords\&quot;:{\&quot;travel\&quot;,\&quot;ice\&quot;},\&quot;genre\&quot;:{\&quot;adventure\&quot;}}&#39;,&#39;language&#39;:[2,3]}}&#x60;&#x60;&#x60;. &lt;br/&gt; The document id can also be missing, in which case an autogenerated one will be used: &lt;br/&gt; &#x60;&#x60;&#x60;{&#39;index&#39;:&#39;movies&#39;,&#39;doc&#39;:{&#39;title&#39;:&#39;This is a new movie&#39;,&#39;plot&#39;:&#39;A secret team goes to North Pole&#39;,&#39;year&#39;:2020,&#39;rating&#39;:9.5,&#39;lat&#39;:60.4,&#39;lon&#39;:51.99,&#39;advise&#39;:&#39;PG-13&#39;,&#39;meta&#39;:&#39;{\&quot;keywords\&quot;:{\&quot;travel\&quot;,\&quot;ice\&quot;},\&quot;genre\&quot;:{\&quot;adventure\&quot;}}&#39;,&#39;language&#39;:[2,3]}}&#x60;&#x60;&#x60; &lt;br/&gt; It responds with an object in format: &lt;br/&gt; &#x60;&#x60;&#x60;{&#39;_index&#39;:&#39;products&#39;,&#39;_id&#39;:701,&#39;created&#39;:true,&#39;result&#39;:&#39;created&#39;,&#39;status&#39;:201}&#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="insertDocumentRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> InsertAsyncWithHttpInfo (InsertDocumentRequest insertDocumentRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'insertDocumentRequest' is set
            if (insertDocumentRequest == null)
                throw new ApiException(400, "Missing required parameter 'insertDocumentRequest' when calling IndexApi->Insert");

            var localVarPath = "/json/insert";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (insertDocumentRequest != null && insertDocumentRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(insertDocumentRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = insertDocumentRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Insert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SuccessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse)));
        }

        /// <summary>
        /// Replace new document in an index Replace an existing document. Input has same format as &#x60;insert&#x60; operation. &lt;br/&gt; Responds with an object in format: &lt;br/&gt; &#x60;&#x60;&#x60; {&#39;_index&#39;:&#39;products&#39;,&#39;_id&#39;:1,&#39;created&#39;:false,&#39;result&#39;:&#39;updated&#39;,&#39;status&#39;:200} &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="insertDocumentRequest"></param>
        /// <returns>SuccessResponse</returns>
        public SuccessResponse Replace (InsertDocumentRequest insertDocumentRequest)
        {
             ApiResponse<SuccessResponse> localVarResponse = ReplaceWithHttpInfo(insertDocumentRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replace new document in an index Replace an existing document. Input has same format as &#x60;insert&#x60; operation. &lt;br/&gt; Responds with an object in format: &lt;br/&gt; &#x60;&#x60;&#x60; {&#39;_index&#39;:&#39;products&#39;,&#39;_id&#39;:1,&#39;created&#39;:false,&#39;result&#39;:&#39;updated&#39;,&#39;status&#39;:200} &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="insertDocumentRequest"></param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        public ApiResponse<SuccessResponse> ReplaceWithHttpInfo (InsertDocumentRequest insertDocumentRequest)
        {
            // verify the required parameter 'insertDocumentRequest' is set
            if (insertDocumentRequest == null)
                throw new ApiException(400, "Missing required parameter 'insertDocumentRequest' when calling IndexApi->Replace");

            var localVarPath = "/json/replace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (insertDocumentRequest != null && insertDocumentRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(insertDocumentRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = insertDocumentRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Replace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SuccessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse)));
        }

        /// <summary>
        /// Replace new document in an index Replace an existing document. Input has same format as &#x60;insert&#x60; operation. &lt;br/&gt; Responds with an object in format: &lt;br/&gt; &#x60;&#x60;&#x60; {&#39;_index&#39;:&#39;products&#39;,&#39;_id&#39;:1,&#39;created&#39;:false,&#39;result&#39;:&#39;updated&#39;,&#39;status&#39;:200} &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="insertDocumentRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SuccessResponse</returns>
        public async System.Threading.Tasks.Task<SuccessResponse> ReplaceAsync (InsertDocumentRequest insertDocumentRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SuccessResponse> localVarResponse = await ReplaceAsyncWithHttpInfo(insertDocumentRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replace new document in an index Replace an existing document. Input has same format as &#x60;insert&#x60; operation. &lt;br/&gt; Responds with an object in format: &lt;br/&gt; &#x60;&#x60;&#x60; {&#39;_index&#39;:&#39;products&#39;,&#39;_id&#39;:1,&#39;created&#39;:false,&#39;result&#39;:&#39;updated&#39;,&#39;status&#39;:200} &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="insertDocumentRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> ReplaceAsyncWithHttpInfo (InsertDocumentRequest insertDocumentRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'insertDocumentRequest' is set
            if (insertDocumentRequest == null)
                throw new ApiException(400, "Missing required parameter 'insertDocumentRequest' when calling IndexApi->Replace");

            var localVarPath = "/json/replace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (insertDocumentRequest != null && insertDocumentRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(insertDocumentRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = insertDocumentRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Replace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SuccessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse)));
        }

        /// <summary>
        /// Update a document in an index Update one or several documents. &lt;br/&gt; The update can be made by passing the id or by using a match query in case multiple documents can be updated. &lt;br/&gt; For example update a document using document id: &lt;br/&gt; &lt;code&gt; {&#39;index&#39;:&#39;movies&#39;,&#39;doc&#39;:{&#39;rating&#39;:9.49},&#39;id&#39;:100} &lt;/code&gt; &lt;br/&gt; And update by using a match query: &lt;br/&gt; &#x60;&#x60;&#x60; {&#39;index&#39;:&#39;movies&#39;,&#39;doc&#39;:{&#39;rating&#39;:9.49},&#39;query&#39;:{&#39;bool&#39;:{&#39;must&#39;:[{&#39;query_string&#39;:&#39;new movie&#39;}]}}} &#x60;&#x60;&#x60;  &lt;br/&gt; The match query has same syntax as for searching. Responds with an object that tells how many documents where updated in format: &lt;br/&gt; &#x60;&#x60;&#x60; {&#39;_index&#39;:&#39;products&#39;,&#39;updated&#39;:1} &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateDocumentRequest"></param>
        /// <returns>UpdateResponse</returns>
        public UpdateResponse Update (UpdateDocumentRequest updateDocumentRequest)
        {
             ApiResponse<UpdateResponse> localVarResponse = UpdateWithHttpInfo(updateDocumentRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a document in an index Update one or several documents. &lt;br/&gt; The update can be made by passing the id or by using a match query in case multiple documents can be updated. &lt;br/&gt; For example update a document using document id: &lt;br/&gt; &lt;code&gt; {&#39;index&#39;:&#39;movies&#39;,&#39;doc&#39;:{&#39;rating&#39;:9.49},&#39;id&#39;:100} &lt;/code&gt; &lt;br/&gt; And update by using a match query: &lt;br/&gt; &#x60;&#x60;&#x60; {&#39;index&#39;:&#39;movies&#39;,&#39;doc&#39;:{&#39;rating&#39;:9.49},&#39;query&#39;:{&#39;bool&#39;:{&#39;must&#39;:[{&#39;query_string&#39;:&#39;new movie&#39;}]}}} &#x60;&#x60;&#x60;  &lt;br/&gt; The match query has same syntax as for searching. Responds with an object that tells how many documents where updated in format: &lt;br/&gt; &#x60;&#x60;&#x60; {&#39;_index&#39;:&#39;products&#39;,&#39;updated&#39;:1} &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateDocumentRequest"></param>
        /// <returns>ApiResponse of UpdateResponse</returns>
        public ApiResponse<UpdateResponse> UpdateWithHttpInfo (UpdateDocumentRequest updateDocumentRequest)
        {
            // verify the required parameter 'updateDocumentRequest' is set
            if (updateDocumentRequest == null)
                throw new ApiException(400, "Missing required parameter 'updateDocumentRequest' when calling IndexApi->Update");

            var localVarPath = "/json/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (updateDocumentRequest != null && updateDocumentRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateDocumentRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateDocumentRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateResponse)));
        }

        /// <summary>
        /// Update a document in an index Update one or several documents. &lt;br/&gt; The update can be made by passing the id or by using a match query in case multiple documents can be updated. &lt;br/&gt; For example update a document using document id: &lt;br/&gt; &lt;code&gt; {&#39;index&#39;:&#39;movies&#39;,&#39;doc&#39;:{&#39;rating&#39;:9.49},&#39;id&#39;:100} &lt;/code&gt; &lt;br/&gt; And update by using a match query: &lt;br/&gt; &#x60;&#x60;&#x60; {&#39;index&#39;:&#39;movies&#39;,&#39;doc&#39;:{&#39;rating&#39;:9.49},&#39;query&#39;:{&#39;bool&#39;:{&#39;must&#39;:[{&#39;query_string&#39;:&#39;new movie&#39;}]}}} &#x60;&#x60;&#x60;  &lt;br/&gt; The match query has same syntax as for searching. Responds with an object that tells how many documents where updated in format: &lt;br/&gt; &#x60;&#x60;&#x60; {&#39;_index&#39;:&#39;products&#39;,&#39;updated&#39;:1} &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateDocumentRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UpdateResponse</returns>
        public async System.Threading.Tasks.Task<UpdateResponse> UpdateAsync (UpdateDocumentRequest updateDocumentRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UpdateResponse> localVarResponse = await UpdateAsyncWithHttpInfo(updateDocumentRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a document in an index Update one or several documents. &lt;br/&gt; The update can be made by passing the id or by using a match query in case multiple documents can be updated. &lt;br/&gt; For example update a document using document id: &lt;br/&gt; &lt;code&gt; {&#39;index&#39;:&#39;movies&#39;,&#39;doc&#39;:{&#39;rating&#39;:9.49},&#39;id&#39;:100} &lt;/code&gt; &lt;br/&gt; And update by using a match query: &lt;br/&gt; &#x60;&#x60;&#x60; {&#39;index&#39;:&#39;movies&#39;,&#39;doc&#39;:{&#39;rating&#39;:9.49},&#39;query&#39;:{&#39;bool&#39;:{&#39;must&#39;:[{&#39;query_string&#39;:&#39;new movie&#39;}]}}} &#x60;&#x60;&#x60;  &lt;br/&gt; The match query has same syntax as for searching. Responds with an object that tells how many documents where updated in format: &lt;br/&gt; &#x60;&#x60;&#x60; {&#39;_index&#39;:&#39;products&#39;,&#39;updated&#39;:1} &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateDocumentRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UpdateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateResponse>> UpdateAsyncWithHttpInfo (UpdateDocumentRequest updateDocumentRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'updateDocumentRequest' is set
            if (updateDocumentRequest == null)
                throw new ApiException(400, "Missing required parameter 'updateDocumentRequest' when calling IndexApi->Update");

            var localVarPath = "/json/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (updateDocumentRequest != null && updateDocumentRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateDocumentRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateDocumentRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateResponse)));
        }

    }
}
