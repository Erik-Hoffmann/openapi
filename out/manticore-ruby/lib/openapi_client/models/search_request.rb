=begin
#Manticore Search API

#This is the API for Manticore Search HTTP protocol 

The version of the OpenAPI document: 1.0.0
Contact: info@manticoresearch.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

=end

require 'date'

module OpenapiClient
  # Payload for search operation
  class SearchRequest
    attr_accessor :index

    attr_accessor :query

    attr_accessor :limit

    attr_accessor :offset

    attr_accessor :max_matches

    attr_accessor :sort

    attr_accessor :script_fields

    attr_accessor :highlight

    attr_accessor :_source

    attr_accessor :profile

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'index' => :'index',
        :'query' => :'query',
        :'limit' => :'limit',
        :'offset' => :'offset',
        :'max_matches' => :'max_matches',
        :'sort' => :'sort',
        :'script_fields' => :'script_fields',
        :'highlight' => :'highlight',
        :'_source' => :'_source',
        :'profile' => :'profile'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'index' => :'String',
        :'query' => :'Hash<String, Object>',
        :'limit' => :'Integer',
        :'offset' => :'Integer',
        :'max_matches' => :'Integer',
        :'sort' => :'Array<Object>',
        :'script_fields' => :'Object',
        :'highlight' => :'Object',
        :'_source' => :'Array<String>',
        :'profile' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::SearchRequest` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::SearchRequest`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'index')
        self.index = attributes[:'index']
      end

      if attributes.key?(:'query')
        if (value = attributes[:'query']).is_a?(Hash)
          self.query = value
        end
      end

      if attributes.key?(:'limit')
        self.limit = attributes[:'limit']
      end

      if attributes.key?(:'offset')
        self.offset = attributes[:'offset']
      end

      if attributes.key?(:'max_matches')
        self.max_matches = attributes[:'max_matches']
      end

      if attributes.key?(:'sort')
        if (value = attributes[:'sort']).is_a?(Array)
          self.sort = value
        end
      end

      if attributes.key?(:'script_fields')
        self.script_fields = attributes[:'script_fields']
      end

      if attributes.key?(:'highlight')
        self.highlight = attributes[:'highlight']
      end

      if attributes.key?(:'_source')
        if (value = attributes[:'_source']).is_a?(Array)
          self._source = value
        end
      end

      if attributes.key?(:'profile')
        self.profile = attributes[:'profile']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @index.nil?
        invalid_properties.push('invalid value for "index", index cannot be nil.')
      end

      if @query.nil?
        invalid_properties.push('invalid value for "query", query cannot be nil.')
      end

      if !@limit.nil? && @limit < 0
        invalid_properties.push('invalid value for "limit", must be greater than or equal to 0.')
      end

      if !@offset.nil? && @offset < 0
        invalid_properties.push('invalid value for "offset", must be greater than or equal to 0.')
      end

      if !@max_matches.nil? && @max_matches < 0
        invalid_properties.push('invalid value for "max_matches", must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @index.nil?
      return false if @query.nil?
      return false if !@limit.nil? && @limit < 0
      return false if !@offset.nil? && @offset < 0
      return false if !@max_matches.nil? && @max_matches < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] limit Value to be assigned
    def limit=(limit)
      if !limit.nil? && limit < 0
        fail ArgumentError, 'invalid value for "limit", must be greater than or equal to 0.'
      end

      @limit = limit
    end

    # Custom attribute writer method with validation
    # @param [Object] offset Value to be assigned
    def offset=(offset)
      if !offset.nil? && offset < 0
        fail ArgumentError, 'invalid value for "offset", must be greater than or equal to 0.'
      end

      @offset = offset
    end

    # Custom attribute writer method with validation
    # @param [Object] max_matches Value to be assigned
    def max_matches=(max_matches)
      if !max_matches.nil? && max_matches < 0
        fail ArgumentError, 'invalid value for "max_matches", must be greater than or equal to 0.'
      end

      @max_matches = max_matches
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          index == o.index &&
          query == o.query &&
          limit == o.limit &&
          offset == o.offset &&
          max_matches == o.max_matches &&
          sort == o.sort &&
          script_fields == o.script_fields &&
          highlight == o.highlight &&
          _source == o._source &&
          profile == o.profile
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [index, query, limit, offset, max_matches, sort, script_fields, highlight, _source, profile].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        OpenapiClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
