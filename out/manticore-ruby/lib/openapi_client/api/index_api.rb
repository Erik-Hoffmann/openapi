=begin
#Manticore Search API

#This is the API for Manticore Search HTTP protocol 

The version of the OpenAPI document: 1.0.0
Contact: info@manticoresearch.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class IndexApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Bulk index operations
    # @param body [Object] 
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def bulk(body, opts = {})
      data, _status_code, _headers = bulk_with_http_info(body, opts)
      data
    end

    # Bulk index operations
    # @param body [Object] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def bulk_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IndexApi.bulk ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling IndexApi.bulk"
      end
      # resource path
      local_var_path = '/json/bulk'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-ndjson'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      # return_type
      return_type = opts[:return_type] || 'SuccessResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IndexApi#bulk\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a document in an index
    # @param delete_document_request [DeleteDocumentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def delete(delete_document_request, opts = {})
      data, _status_code, _headers = delete_with_http_info(delete_document_request, opts)
      data
    end

    # Delete a document in an index
    # @param delete_document_request [DeleteDocumentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def delete_with_http_info(delete_document_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IndexApi.delete ...'
      end
      # verify the required parameter 'delete_document_request' is set
      if @api_client.config.client_side_validation && delete_document_request.nil?
        fail ArgumentError, "Missing the required parameter 'delete_document_request' when calling IndexApi.delete"
      end
      # resource path
      local_var_path = '/json/delete'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(delete_document_request) 

      # return_type
      return_type = opts[:return_type] || 'SuccessResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IndexApi#delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new document in an index
    # @param insert_document_request [InsertDocumentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def insert(insert_document_request, opts = {})
      data, _status_code, _headers = insert_with_http_info(insert_document_request, opts)
      data
    end

    # Create a new document in an index
    # @param insert_document_request [InsertDocumentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def insert_with_http_info(insert_document_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IndexApi.insert ...'
      end
      # verify the required parameter 'insert_document_request' is set
      if @api_client.config.client_side_validation && insert_document_request.nil?
        fail ArgumentError, "Missing the required parameter 'insert_document_request' when calling IndexApi.insert"
      end
      # resource path
      local_var_path = '/json/insert'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(insert_document_request) 

      # return_type
      return_type = opts[:return_type] || 'SuccessResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IndexApi#insert\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replace new document in an index
    # @param insert_document_request [InsertDocumentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def replace(insert_document_request, opts = {})
      data, _status_code, _headers = replace_with_http_info(insert_document_request, opts)
      data
    end

    # Replace new document in an index
    # @param insert_document_request [InsertDocumentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def replace_with_http_info(insert_document_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IndexApi.replace ...'
      end
      # verify the required parameter 'insert_document_request' is set
      if @api_client.config.client_side_validation && insert_document_request.nil?
        fail ArgumentError, "Missing the required parameter 'insert_document_request' when calling IndexApi.replace"
      end
      # resource path
      local_var_path = '/json/replace'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(insert_document_request) 

      # return_type
      return_type = opts[:return_type] || 'SuccessResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IndexApi#replace\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a document in an index
    # @param update_document_request [UpdateDocumentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def update(update_document_request, opts = {})
      data, _status_code, _headers = update_with_http_info(update_document_request, opts)
      data
    end

    # Update a document in an index
    # @param update_document_request [UpdateDocumentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def update_with_http_info(update_document_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IndexApi.update ...'
      end
      # verify the required parameter 'update_document_request' is set
      if @api_client.config.client_side_validation && update_document_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_document_request' when calling IndexApi.update"
      end
      # resource path
      local_var_path = '/json/update'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(update_document_request) 

      # return_type
      return_type = opts[:return_type] || 'SuccessResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IndexApi#update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
