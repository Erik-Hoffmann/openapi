=begin
#Manticore Search API

#This is the API for Manticore Search HTTP protocol. For full documentation of the API methods consult https://manual.manticoresearch.com/. 

The version of the OpenAPI document: 1.0.0
Contact: info@manticoresearch.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class IndexApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Bulk index operations
    # Sends multiple operatons like inserts, updates, replaces or deletes. <br/> For each operation it's object must have same format as in their dedicated method. <br/> The method expects a raw string as the batch in NDJSON.  Each operation object needs to be serialized to   JSON and separated by endline (\\n). <br/>     An example of raw input:      `{\"insert\": {\"index\": \"movies\", \"doc\": {\"plot\": \"A secret team goes to North Pole\", \"rating\": 9.5, \"language\": [2, 3], \"title\": \"This is an older movie\", \"lon\": 51.99, \"meta\": {\"keywords\":[\"travel\",\"ice\"],\"genre\":[\"adventure\"]}, \"year\": 1950, \"lat\": 60.4, \"advise\": \"PG-13\"}}}\\n{\"delete\": {\"index\": \"movies\",\"id\":700}}`      Responds with an object telling whenever any errors occured and an array with status for each operation:<br/>   ```   {'items':[{'update':{'_index':'products','_id':1,'result':'updated'}},{'update':{'_index':'products','_id':2,'result':'updated'}}],'errors':false}   ```   
    # @param body [String] 
    # @param [Hash] opts the optional parameters
    # @return [BulkResponse]
    def bulk(body, opts = {})
      data, _status_code, _headers = bulk_with_http_info(body, opts)
      data
    end

    # Bulk index operations
    # Sends multiple operatons like inserts, updates, replaces or deletes. &lt;br/&gt; For each operation it&#39;s object must have same format as in their dedicated method. &lt;br/&gt; The method expects a raw string as the batch in NDJSON.  Each operation object needs to be serialized to   JSON and separated by endline (\\n). &lt;br/&gt;     An example of raw input:      &#x60;{\&quot;insert\&quot;: {\&quot;index\&quot;: \&quot;movies\&quot;, \&quot;doc\&quot;: {\&quot;plot\&quot;: \&quot;A secret team goes to North Pole\&quot;, \&quot;rating\&quot;: 9.5, \&quot;language\&quot;: [2, 3], \&quot;title\&quot;: \&quot;This is an older movie\&quot;, \&quot;lon\&quot;: 51.99, \&quot;meta\&quot;: {\&quot;keywords\&quot;:[\&quot;travel\&quot;,\&quot;ice\&quot;],\&quot;genre\&quot;:[\&quot;adventure\&quot;]}, \&quot;year\&quot;: 1950, \&quot;lat\&quot;: 60.4, \&quot;advise\&quot;: \&quot;PG-13\&quot;}}}\\n{\&quot;delete\&quot;: {\&quot;index\&quot;: \&quot;movies\&quot;,\&quot;id\&quot;:700}}&#x60;      Responds with an object telling whenever any errors occured and an array with status for each operation:&lt;br/&gt;   &#x60;&#x60;&#x60;   {&#39;items&#39;:[{&#39;update&#39;:{&#39;_index&#39;:&#39;products&#39;,&#39;_id&#39;:1,&#39;result&#39;:&#39;updated&#39;}},{&#39;update&#39;:{&#39;_index&#39;:&#39;products&#39;,&#39;_id&#39;:2,&#39;result&#39;:&#39;updated&#39;}}],&#39;errors&#39;:false}   &#x60;&#x60;&#x60;   
    # @param body [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BulkResponse, Integer, Hash)>] BulkResponse data, response status code and response headers
    def bulk_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IndexApi.bulk ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling IndexApi.bulk"
      end
      # resource path
      local_var_path = '/json/bulk'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-ndjson'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      # return_type
      return_type = opts[:return_type] || 'BulkResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IndexApi#bulk\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a document in an index
    # Delete one or several documents. <br/> The method has 2 ways of deleting: either by id, in case only one document is deleted or by using a  match query, in which case multiple documents can be delete . <br/> Example of input to delete by id: <br/> ``` {'index':'movies','id':100} ``` <br/> Example of input to delete using a query: ``` {'index':'movies','query':{'bool':{'must':[{'query_string':'new movie'}]}}} ``` <br/> The match query has same syntax as in for searching. <br/> Responds with an object telling how many documents got deleted: <br/> ``` {'_index':'products','updated':1} ``` 
    # @param delete_document_request [DeleteDocumentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [DeleteResponse]
    def delete(delete_document_request, opts = {})
      data, _status_code, _headers = delete_with_http_info(delete_document_request, opts)
      data
    end

    # Delete a document in an index
    # Delete one or several documents. &lt;br/&gt; The method has 2 ways of deleting: either by id, in case only one document is deleted or by using a  match query, in which case multiple documents can be delete . &lt;br/&gt; Example of input to delete by id: &lt;br/&gt; &#x60;&#x60;&#x60; {&#39;index&#39;:&#39;movies&#39;,&#39;id&#39;:100} &#x60;&#x60;&#x60; &lt;br/&gt; Example of input to delete using a query: &#x60;&#x60;&#x60; {&#39;index&#39;:&#39;movies&#39;,&#39;query&#39;:{&#39;bool&#39;:{&#39;must&#39;:[{&#39;query_string&#39;:&#39;new movie&#39;}]}}} &#x60;&#x60;&#x60; &lt;br/&gt; The match query has same syntax as in for searching. &lt;br/&gt; Responds with an object telling how many documents got deleted: &lt;br/&gt; &#x60;&#x60;&#x60; {&#39;_index&#39;:&#39;products&#39;,&#39;updated&#39;:1} &#x60;&#x60;&#x60; 
    # @param delete_document_request [DeleteDocumentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteResponse, Integer, Hash)>] DeleteResponse data, response status code and response headers
    def delete_with_http_info(delete_document_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IndexApi.delete ...'
      end
      # verify the required parameter 'delete_document_request' is set
      if @api_client.config.client_side_validation && delete_document_request.nil?
        fail ArgumentError, "Missing the required parameter 'delete_document_request' when calling IndexApi.delete"
      end
      # resource path
      local_var_path = '/json/delete'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(delete_document_request) 

      # return_type
      return_type = opts[:return_type] || 'DeleteResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IndexApi#delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new document in an index
    # Insert a document. <br/> Expects an object like: <br/> ```{'index':'movies','id':701,'doc':{'title':'This is an old movie','plot':'A secret team goes to North Pole','year':1950,'rating':9.5,'lat':60.4,'lon':51.99,'advise':'PG-13','meta':'{\"keywords\":{\"travel\",\"ice\"},\"genre\":{\"adventure\"}}','language':[2,3]}}```. <br/> The document id can also be missing, in which case an autogenerated one will be used: <br/> ```{'index':'movies','doc':{'title':'This is a new movie','plot':'A secret team goes to North Pole','year':2020,'rating':9.5,'lat':60.4,'lon':51.99,'advise':'PG-13','meta':'{\"keywords\":{\"travel\",\"ice\"},\"genre\":{\"adventure\"}}','language':[2,3]}}``` <br/> It responds with an object in format: <br/> ```{'_index':'products','_id':701,'created':true,'result':'created','status':201}``` 
    # @param insert_document_request [InsertDocumentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def insert(insert_document_request, opts = {})
      data, _status_code, _headers = insert_with_http_info(insert_document_request, opts)
      data
    end

    # Create a new document in an index
    # Insert a document. &lt;br/&gt; Expects an object like: &lt;br/&gt; &#x60;&#x60;&#x60;{&#39;index&#39;:&#39;movies&#39;,&#39;id&#39;:701,&#39;doc&#39;:{&#39;title&#39;:&#39;This is an old movie&#39;,&#39;plot&#39;:&#39;A secret team goes to North Pole&#39;,&#39;year&#39;:1950,&#39;rating&#39;:9.5,&#39;lat&#39;:60.4,&#39;lon&#39;:51.99,&#39;advise&#39;:&#39;PG-13&#39;,&#39;meta&#39;:&#39;{\&quot;keywords\&quot;:{\&quot;travel\&quot;,\&quot;ice\&quot;},\&quot;genre\&quot;:{\&quot;adventure\&quot;}}&#39;,&#39;language&#39;:[2,3]}}&#x60;&#x60;&#x60;. &lt;br/&gt; The document id can also be missing, in which case an autogenerated one will be used: &lt;br/&gt; &#x60;&#x60;&#x60;{&#39;index&#39;:&#39;movies&#39;,&#39;doc&#39;:{&#39;title&#39;:&#39;This is a new movie&#39;,&#39;plot&#39;:&#39;A secret team goes to North Pole&#39;,&#39;year&#39;:2020,&#39;rating&#39;:9.5,&#39;lat&#39;:60.4,&#39;lon&#39;:51.99,&#39;advise&#39;:&#39;PG-13&#39;,&#39;meta&#39;:&#39;{\&quot;keywords\&quot;:{\&quot;travel\&quot;,\&quot;ice\&quot;},\&quot;genre\&quot;:{\&quot;adventure\&quot;}}&#39;,&#39;language&#39;:[2,3]}}&#x60;&#x60;&#x60; &lt;br/&gt; It responds with an object in format: &lt;br/&gt; &#x60;&#x60;&#x60;{&#39;_index&#39;:&#39;products&#39;,&#39;_id&#39;:701,&#39;created&#39;:true,&#39;result&#39;:&#39;created&#39;,&#39;status&#39;:201}&#x60;&#x60;&#x60; 
    # @param insert_document_request [InsertDocumentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def insert_with_http_info(insert_document_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IndexApi.insert ...'
      end
      # verify the required parameter 'insert_document_request' is set
      if @api_client.config.client_side_validation && insert_document_request.nil?
        fail ArgumentError, "Missing the required parameter 'insert_document_request' when calling IndexApi.insert"
      end
      # resource path
      local_var_path = '/json/insert'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(insert_document_request) 

      # return_type
      return_type = opts[:return_type] || 'SuccessResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IndexApi#insert\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replace new document in an index
    # Replace an existing document. Input has same format as `insert` operation. <br/> Responds with an object in format: <br/> ``` {'_index':'products','_id':1,'created':false,'result':'updated','status':200} ``` 
    # @param insert_document_request [InsertDocumentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def replace(insert_document_request, opts = {})
      data, _status_code, _headers = replace_with_http_info(insert_document_request, opts)
      data
    end

    # Replace new document in an index
    # Replace an existing document. Input has same format as &#x60;insert&#x60; operation. &lt;br/&gt; Responds with an object in format: &lt;br/&gt; &#x60;&#x60;&#x60; {&#39;_index&#39;:&#39;products&#39;,&#39;_id&#39;:1,&#39;created&#39;:false,&#39;result&#39;:&#39;updated&#39;,&#39;status&#39;:200} &#x60;&#x60;&#x60; 
    # @param insert_document_request [InsertDocumentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def replace_with_http_info(insert_document_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IndexApi.replace ...'
      end
      # verify the required parameter 'insert_document_request' is set
      if @api_client.config.client_side_validation && insert_document_request.nil?
        fail ArgumentError, "Missing the required parameter 'insert_document_request' when calling IndexApi.replace"
      end
      # resource path
      local_var_path = '/json/replace'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(insert_document_request) 

      # return_type
      return_type = opts[:return_type] || 'SuccessResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IndexApi#replace\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a document in an index
    # Update one or several documents. <br/> The update can be made by passing the id or by using a match query in case multiple documents can be updated. <br/> For example update a document using document id: <br/> <code> {'index':'movies','doc':{'rating':9.49},'id':100} </code> <br/> And update by using a match query: <br/> ``` {'index':'movies','doc':{'rating':9.49},'query':{'bool':{'must':[{'query_string':'new movie'}]}}} ```  <br/> The match query has same syntax as for searching. Responds with an object that tells how many documents where updated in format: <br/> ``` {'_index':'products','updated':1} ``` 
    # @param update_document_request [UpdateDocumentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [UpdateResponse]
    def update(update_document_request, opts = {})
      data, _status_code, _headers = update_with_http_info(update_document_request, opts)
      data
    end

    # Update a document in an index
    # Update one or several documents. &lt;br/&gt; The update can be made by passing the id or by using a match query in case multiple documents can be updated. &lt;br/&gt; For example update a document using document id: &lt;br/&gt; &lt;code&gt; {&#39;index&#39;:&#39;movies&#39;,&#39;doc&#39;:{&#39;rating&#39;:9.49},&#39;id&#39;:100} &lt;/code&gt; &lt;br/&gt; And update by using a match query: &lt;br/&gt; &#x60;&#x60;&#x60; {&#39;index&#39;:&#39;movies&#39;,&#39;doc&#39;:{&#39;rating&#39;:9.49},&#39;query&#39;:{&#39;bool&#39;:{&#39;must&#39;:[{&#39;query_string&#39;:&#39;new movie&#39;}]}}} &#x60;&#x60;&#x60;  &lt;br/&gt; The match query has same syntax as for searching. Responds with an object that tells how many documents where updated in format: &lt;br/&gt; &#x60;&#x60;&#x60; {&#39;_index&#39;:&#39;products&#39;,&#39;updated&#39;:1} &#x60;&#x60;&#x60; 
    # @param update_document_request [UpdateDocumentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateResponse, Integer, Hash)>] UpdateResponse data, response status code and response headers
    def update_with_http_info(update_document_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IndexApi.update ...'
      end
      # verify the required parameter 'update_document_request' is set
      if @api_client.config.client_side_validation && update_document_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_document_request' when calling IndexApi.update"
      end
      # resource path
      local_var_path = '/json/update'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(update_document_request) 

      # return_type
      return_type = opts[:return_type] || 'UpdateResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IndexApi#update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
